%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(TM) 7.0%%AI8_CreatorVersion: 10.0%%For: (Marc Bello) (all design barcelona)%%Title: (LOGO 3SCALE3.ai)%%CreationDate: 14/4/11 21:18%%BoundingBox: 0 0 842 596%%HiResBoundingBox: 0 0 841.8896 595.2756%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 8.504 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 421 298 421 298%AI3_TileBox: 30 31 586 811%AI3_DocumentPreview: None%AI5_ArtSize: 842 595%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 300%AI5_NumLayers: 4%AI5_OpenToView: -411 766 1 1668 947 26 0 1 6 42 0 0%AI5_OpenViewLayers: 7777%%PageOrigin:30 31%%AI3_PaperRect:-18 824 577 -18%%AI3_Margin:18 -41 -18 18%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 92 8%%BeginData: 5786 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD22FFA8A8A8FD2FFF%A8FFFF527DA87DFD47FFA82752FD2CFFA8FFA827FF7D5252FFA8FF7D527D%FD43FFA85227FD2CFF277DFD04FFA8FFFFFF7DFF52FFA87DFD42FF2752FD%29FFA87DFF7DA8FD04FFA87DFF5252A8FFFFA87DFD41FFA85227FD29FF52%27A8FFFFFF7DA8FFA852A8FFA8FFFF7DA8FFFFA8FD40FF2752FD29FF7D52%FFFFFF7D2752A8FFA8FD05FF52FFFFA8277DFD07FFCEFD07C0C8FD05FFA8%FD067DA8FD07FFA8FD057DA8FD07FFFD077DFD05FFA85227FD05FFA8A8FD%057DA8FD1BFFA8FFFF7DA8FFFF7DA8FF527DFFFF7DFFFFFF7D7DFF7DA8FD%07FFC0C0C1C8C8C9C1C1C0CEFFFFFF7D275227522752275252FD05FF5252%27522752275252FD04FFA8525227522752275252A8FFFFFFA82752FD04FF%7D52275227522752277DFD19FF7D52FFFF52A8FD05FFA87DFF7D5227FFA8%5227A8FFA827A8FD04FFC8C0C1FD05FFC9C0C1FFFFA8275252FD057D2752%52FFFFFF2752277D7DA87D7D275252FFFFFF2752277D7DA87D7D275227FF%FFFFA85227FFFFFFA85227527DA8A87D5252277DFD1BFFA8FFFFC8C0C8CF%FFA8FFFFFF52A8FFFF7D7DFFFFA8527DFD04FFC9C0CFFD06FFC0C7FFFF52%5252FD06FF7D277DFFFFA85227FD06FFA82752FFFFFF5227A8FD06FF2752%A8FFFFA82752FFFFFF7D277DFD06FF7D5252FD17FFA827FF7D52FFC9C0C0%C0C1A85252FD05FFCAFD05FFA8FD05FFC9C8CAFD05FFCFC0C1FFFF52277D%FD06FFA87D7DFFFF7D2752FD06FFA85227FFFFA8527DA8FD06FF52277DFF%FFA85227FFFFFF27527DFD06FFA82752FD17FFA87DFD04FFC8FD04C0FF52%A8FD04FFC1C1CFFF27A8FFFF7DFD0CFFC9C0C8FFFF7D5252FD0BFF525252%FD07FFA8A8FD0CFF52527DFFFFFF2752FFFFFF5227A8FD06FFA85227FD1D%FFCFBAC0C0C1FFFFFFA827A8CAC0C0CFFF7DA8FF5252FD08FFC1C7C1C1BA%C1CAFFFFA82752277D5252527D7DFD04FF52277DFD0CFFA87D2752275227%527D52277DFFFFA85227FFFFFF2752527D5252527D52522752A8FD16FF52%7DFFA827A8FFCFC1C8CFFFFFFFA8527DFFCACFFD06FFA8FD08FFC7FD05C0%CFFFFFFF7D275227522752275227A8FFFF525252FD0CFF52275227522752%275227527DFFFFFF2752FFFFFF522752275227522752275227A8FD15FF52%52277DA852A8FF7DFFFFFFA8527DFFA8FFFFFF52FF7D52A8FF7D52A8FD0B%FFC9C0C0FD05FFA8A8FD047D275227FFFF52277DFD0BFFA827527DFD05FF%7D52277DFFFFA85227FFFFFF27527DFD09A8FD17FF527DFD04FF7D52A8FF%7DFF52FFFFCEC1C8C9A8FF7D52FF7D52277DFFFFFFC9C8FD07FFC1C0FD0B%FFA82752A8FF525252FD07FF527DA8FF7D5252FD07FF52527DFFFFA82752%FFFFFF5227A8FD21FFA8FFFF7DA8FFA8FF525252FFFFC9C0C0BAC0C9FD05%FF5252A8FFFFFFC1C0C9FD06FFC1BAFFFF52277DFD06FFA85227A8FF7D27%52FD07FF5227A8FF7D2752FD07FF52277DFFFFA85227FFFFFF27527DFD06%FFA82752A8FD17FFA8FFFF52FD04FFA8277DFFFFFD05C0C1FFFF52FD08FF%C7C0CFFD06FFC0C0FFFF52527DFD06FFA82752A8FF7D5227FD07FF2752A8%FF7D5227FD07FF27527DFFFFA82752FFFFFF7D277DFD06FFA85227FD17FF%7D2752FFFFFF5227FFFFA8FFFFFFFD06C0FF525252FF7DFD05FFC8C0C1CF%C9FFFFCFC8C0C0FFFF7D275252FD057D275227FFFFFF2752277DFD04A852%5227FFFFA8275252FD04A87D2752277DFFFFA85227FFFFFF7D52277D7DA8%A8A87D522752FD17FFA8527DFFFFFF7D7DFD06FFC1FD04C0C8FFFF7DFFFF%7DA8FD05FFC1FD08C0CEFFFFA852275227522752275227A8FFFFFFA85252%27522752275252A8FFFFFF7D275227522752275252527DFFFFFF2752FD04%FF7D522752275227522752A8FD18FFA8FFA8FD07FFA852FFCFC0C0C0C1CA%A8A8FFFF7D7DFD07FFC9C8A0FD04C8CFFD05FFA87D7D5252527D7DFD07FF%7D7D527D527D7DFD06FFA87D7D52527DA8A8A87DA8FFFFA87D7DFD05FFA8%7D7D52527D7D7DA8FD1AFF7D52A8FFFF7DA8FFA8FFFFFF7DFFCFCFFFFF52%52FF7D2752A8FD1FFFA8FD1FFFCFFFFFCFFD08FFCAFD1BFF5227FFFF7D27%52A85227FF52527DFFA8FFFFA87DFFA85252FD06FFA8A8FF52A8FFA8FFFF%FF7DA8FFA8FFA8FF7DA8FFFFA8FFA8FFA87DA8FFA8FFA87D7DA8FD04FFC9%FFC9FFCAFFC9CFC9FFCACFC9CFCACFC9FFCACFC1CFC1CFCAFFCACFC9FFCA%C1C8FD1FFF7DA8FF7D52FFFF7DFF7D5252FD05FFA8FD07FFFD047D52A852%7D52FF7D7D7DA8FD057DFF7D7D7D52A8A8FD047DA8FF7D7D7DA852FFC9C1%C1C0C1C0C8C7C8C0C1C1C8C0C0C8C0C0C8C0C8C1C1C7C0C8FFC7C0C0C1C7%C1C0C9FD1BFF7D7DFD05FFA8FF7DA8FFA8277DFFFF7DA8FD09FF7DA8FD04%7D527D527D527DFF527D527D527D7D7DA87D52A8A8A8527D7DFFFF527DA8%7D52A8CFC0C8C1C9C0C8C0C8C1C8BAC8C0C0C1C0C0C7BAC8C0C8C0C0C1FF%C0C0C0C7C0C1C0CFFD1BFFA8A8FFA852FFFFFFA85227FD04FF7DA8FFA8FD%09FFA8FFFFFFA8FFA8FFA8FD05FFA8FD04FFA8A8FD0BFFA8FFFFFFA8FFC9%C8CFCFFFCFCFC0C9FD05CFC9CFC9FD08CFFFFFCFC9CFCFFFCFCFFD1FFF27%527DFFA8FF7D7DFFFFFFA82752FD32FFCAFD05FFCAFD3AFF7DFFA85252FF%FF7D7DFFFF7DA8FD76FF52A8FFFF527DFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD18FFFD0F%F87DFD06A87DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87DA87DA8A8A8FD4AFFF8F8F8527D7DA8FD057D52F8F8FD057D527DFD08%527D5252527DFD05527D5252FD047D527D7DFD04A8FD4AFFF8F8F8272752%FD052752F8F8F87D525227522752277D2752275227527D52275252522752%52522752272727525227277DFD04A8FDFCFFFDFCFFFD51FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registro]) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Background) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Foreground) Ln0 Auu300 Ar0 O0 0 0 0 k0 J 0 j 1 w 3.8637 M []0 d1 XR0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUuu0 0 0 0.2 k99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 Lfq4 M99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 LhWnu0 O0 0 0 0.2 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQU0 Au0 O0 0 0 0.2 k0 J 0 j 1 w 3.8637 M []0 d1 XR333.8911 35.7905 m350.27 35.7905 L350.27 17.3652 L333.8911 17.3652 L333.8911 35.7905 Lfq4 M333.8911 35.7905 m350.27 35.7905 L350.27 17.3652 L333.8911 17.3652 L333.8911 35.7905 LhWnu0 O0 0 0 0.2 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQU0 Au0 O0 0 0 0.1 k0 J 0 j 1 w 3.8637 M []0 d1 XR147.7297 35.7905 m337.2881 35.7905 L337.2881 17.3652 L147.7297 17.3652 L147.7297 35.7905 Lfq4 M147.7297 35.7905 m337.2881 35.7905 L337.2881 17.3652 L147.7297 17.3652 L147.7297 35.7905 LhWnu0 O0 0 0 0.1 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 Lfu0 0 0 0.28 k99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 Lfq4 M99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 LhWnu0 O0 0 0 0.28 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQU0 Au0 O0 0 0 0.28 k0 J 0 j 1 w 3.8637 M []0 d1 XR333.8911 35.7905 m350.27 35.7905 L350.27 17.3652 L333.8911 17.3652 L333.8911 35.7905 Lfq4 M333.8911 35.7905 m350.27 35.7905 L350.27 17.3652 L333.8911 17.3652 L333.8911 35.7905 LhWnu0 O0 0 0 0.28 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQUUQU0 Au0 O0 0 0 0.05 k0 J 0 j 1 w 3.8637 M []0 d1 XR131.7974 35.7905 m321.3555 35.7905 L321.3555 17.3652 L131.7974 17.3652 L131.7974 35.7905 Lfq4 M131.7974 35.7905 m321.3555 35.7905 L321.3555 17.3652 L131.7974 17.3652 L131.7974 35.7905 LhWnu0 O0 0 0 0.05 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 Lfu0 0 0 0.24 k99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 Lfq4 M99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 LhWnu0 O0 0 0 0.24 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQU0 Au0 O0 0 0 0.145 k0 J 0 j 1 w 3.8637 M []0 d1 XR147.7297 35.7905 m337.2881 35.7905 L337.2881 17.3652 L147.7297 17.3652 L147.7297 35.7905 Lfq4 M147.7297 35.7905 m337.2881 35.7905 L337.2881 17.3652 L147.7297 17.3652 L147.7297 35.7905 LhWnu0 O0 0 0 0.145 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 Lfu0 0 0 0.3159 k99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 Lfq4 M99.3987 35.7905 m329.1768 35.7905 L329.1768 17.3652 L99.3987 17.3652 L99.3987 35.7905 LhWnu0 O0 0 0 0.3159 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQU0 Au0 O0 0 0 0.3159 k0 J 0 j 1 w 3.8637 M []0 d1 XR333.8911 35.7905 m350.2705 35.7905 L350.2705 17.3652 L333.8911 17.3652 L333.8911 35.7905 Lfq4 M333.8911 35.7905 m350.2705 35.7905 L350.2705 17.3652 L333.8911 17.3652 L333.8911 35.7905 LhWnu0 O0 0 0 0.3159 k3.8637 M0 595.2756 m841.8896 595.2756 L841.8896 0 L0 0 L0 595.2756 LfUQUUQUUQU0 Auu*u1 O0 0 0 1 k0 J 0 j 1 w 3.8637 M []0 d1 XR206.1177 22.8877 m206.2231 23.0986 206.2759 23.3384 206.2759 23.584 C206.2759 24.3677 205.6968 24.8535 205.1172 24.8535 c204.4971 24.8535 203.8887 24.4731 203.8887 23.5195 c203.8887 22.7124 204.3569 22.3613 204.8833 22.3613 C204.9829 22.3613 205.1118 22.3789 205.1992 22.4141 C205.2109 22.4141 L204.3335 20.6533 L205.0005 20.6533 L206.1177 22.8877 Lf205.0825 22.8877 m204.7549 22.8877 204.4854 23.1045 204.4854 23.5723 C204.4854 24.0693 204.8076 24.2568 205.0825 24.2568 C205.4453 24.2568 205.6792 24.0405 205.6792 23.5723 C205.6792 23.1045 205.4102 22.8877 205.0825 22.8877 Cf*UUu207.5161 22.5371 m207.7676 22.5371 L208.1187 22.5371 208.4111 22.291 208.4111 21.876 C208.4111 21.4663 208.1128 21.2148 207.7793 21.2148 C207.4399 21.2148 207.2705 21.4019 207.1592 21.6885 C206.5625 21.6885 L206.6738 20.9927 207.1826 20.6182 207.7441 20.6182 c208.4521 20.6182 209.0078 21.1211 209.0078 21.8936 C209.0078 22.2329 208.8672 22.5835 208.5166 22.8062 C208.8618 23.0283 208.9609 23.3501 208.9609 23.666 C208.9609 24.2744 208.4756 24.8535 207.7324 24.8535 c207.1416 24.8535 206.6328 24.3447 206.5859 23.7534 C207.1826 23.7534 L207.2471 24.0928 207.5044 24.2568 207.7559 24.2568 C208.0894 24.2568 208.3643 23.9937 208.3643 23.6543 C208.3643 23.3149 208.1187 23.0635 207.7207 23.0635 C207.5161 23.0635 L207.5161 22.5371 LfUu210.7681 21.2734 m212.5059 21.2734 L212.5059 20.6533 L213.1025 20.6533 L213.1025 21.2734 L213.436 21.2734 L213.436 21.835 L213.1025 21.835 L213.1025 23.0342 L212.5059 23.0342 L212.5059 21.835 L211.4175 21.835 L212.8276 24.8184 L212.1606 24.8184 L210.7681 21.835 L210.7681 21.2734 LfUu214.6411 20.6533 m215.2378 20.6533 L215.2378 24.8184 L214.6411 24.8184 L214.0503 24.3857 L214.0503 23.7534 L214.6411 24.1865 L214.6411 20.6533 LfUu216.3848 21.2734 m218.1221 21.2734 L218.1221 20.6533 L218.7188 20.6533 L218.7188 21.2734 L219.0522 21.2734 L219.0522 21.835 L218.7188 21.835 L218.7188 23.0342 L218.1221 23.0342 L218.1221 21.835 L217.0342 21.835 L218.4438 24.8184 L217.7769 24.8184 L216.3848 21.835 L216.3848 21.2734 LfUu*u220.8945 22.5835 m220.7891 22.373 220.7368 22.1333 220.7368 21.8877 C220.7368 21.1035 221.3159 20.6182 221.895 20.6182 C222.5151 20.6182 223.1235 20.9985 223.1235 21.9517 c223.1235 22.7593 222.6553 23.1104 222.1289 23.1104 C222.0293 23.1104 221.9009 23.0928 221.813 23.0576 C221.8013 23.0576 L222.6787 24.8184 L222.0122 24.8184 L220.8945 22.5835 Lf221.9302 22.5835 m222.2578 22.5835 222.5269 22.3672 222.5269 21.8994 C222.5269 21.4019 222.2051 21.2148 221.9302 21.2148 C221.5674 21.2148 221.3335 21.4312 221.3335 21.8994 C221.3335 22.3672 221.6025 22.5835 221.9302 22.5835 Cf*UUu*u225.7739 22.8877 m225.8789 23.0986 225.9316 23.3384 225.9316 23.584 C225.9316 24.3677 225.3525 24.8535 224.7734 24.8535 c224.1533 24.8535 223.5449 24.4731 223.5449 23.5195 c223.5449 22.7124 224.0127 22.3613 224.5391 22.3613 C224.6387 22.3613 224.7676 22.3789 224.855 22.4141 C224.8667 22.4141 L223.9893 20.6533 L224.6563 20.6533 L225.7739 22.8877 Lf224.7383 22.8877 m224.4106 22.8877 224.1416 23.1045 224.1416 23.5723 C224.1416 24.0693 224.4634 24.2568 224.7383 24.2568 C225.1011 24.2568 225.335 24.0405 225.335 23.5723 C225.335 23.1045 225.0659 22.8877 224.7383 22.8877 Cf*UUu227.7329 20.6533 m230.1084 20.6533 L230.1084 21.25 L228.5171 21.25 L229.8564 22.9287 L230.0322 23.145 230.1084 23.3853 230.1084 23.6602 C230.1084 24.3213 229.5874 24.8535 228.8916 24.8535 c228.2656 24.8535 227.7388 24.333 227.7329 23.6543 C228.3296 23.6543 L228.3589 24.0288 228.6162 24.2568 228.938 24.2568 C229.2949 24.2568 229.5117 23.9585 229.5117 23.666 C229.5117 23.543 229.4883 23.4146 229.3594 23.2505 C227.7329 21.2148 L227.7329 20.6533 LfUu*u232.7935 22.8877 m232.8989 23.0986 232.9512 23.3384 232.9512 23.584 C232.9512 24.3677 232.3721 24.8535 231.793 24.8535 c231.1729 24.8535 230.5645 24.4731 230.5645 23.5195 c230.5645 22.7124 231.0327 22.3613 231.5591 22.3613 C231.6587 22.3613 231.7871 22.3789 231.875 22.4141 C231.8867 22.4141 L231.0093 20.6533 L231.6763 20.6533 L232.7935 22.8877 Lf231.7578 22.8877 m231.4302 22.8877 231.1611 23.1045 231.1611 23.5723 C231.1611 24.0693 231.4829 24.2568 231.7578 24.2568 C232.1206 24.2568 232.3545 24.0405 232.3545 23.5723 C232.3545 23.1045 232.0854 22.8877 231.7578 22.8877 Cf*UUu234.8755 22.3613 m234.8755 22.145 235.0513 21.9697 235.2676 21.9697 C235.4839 21.9697 235.6597 22.145 235.6597 22.3613 C235.6597 22.5776 235.4839 22.7534 235.2676 22.7534 C235.0513 22.7534 234.8755 22.5776 234.8755 22.3613 CfUu*u237.7412 22.5835 m237.6362 22.373 237.5835 22.1333 237.5835 21.8877 C237.5835 21.1035 238.1626 20.6182 238.7417 20.6182 C239.3618 20.6182 239.9702 20.9985 239.9702 21.9517 c239.9702 22.7593 239.502 23.1104 238.9756 23.1104 C238.8765 23.1104 238.7476 23.0928 238.6597 23.0576 C238.6479 23.0576 L239.5254 24.8184 L238.8589 24.8184 L237.7412 22.5835 Lf238.7769 22.5835 m239.1045 22.5835 239.3735 22.3672 239.3735 21.8994 C239.3735 21.4019 239.0518 21.2148 238.7769 21.2148 C238.4141 21.2148 238.1802 21.4312 238.1802 21.8994 C238.1802 22.3672 238.4492 22.5835 238.7769 22.5835 Cf*UUu240.251 21.2734 m241.9888 21.2734 L241.9888 20.6533 L242.5854 20.6533 L242.5854 21.2734 L242.9189 21.2734 L242.9189 21.835 L242.5854 21.835 L242.5854 23.0342 L241.9888 23.0342 L241.9888 21.835 L240.9004 21.835 L242.3105 24.8184 L241.6436 24.8184 L240.251 21.835 L240.251 21.2734 LfUu*u245.4287 22.8877 m245.5337 23.0986 245.5864 23.3384 245.5864 23.584 C245.5864 24.3677 245.0073 24.8535 244.4282 24.8535 c243.8081 24.8535 243.1997 24.4731 243.1997 23.5195 c243.1997 22.7124 243.6675 22.3613 244.1943 22.3613 C244.2935 22.3613 244.4224 22.3789 244.5098 22.4141 C244.5215 22.4141 L243.6445 20.6533 L244.311 20.6533 L245.4287 22.8877 Lf244.3931 22.8877 m244.0654 22.8877 243.7964 23.1045 243.7964 23.5723 C243.7964 24.0693 244.1182 24.2568 244.3931 24.2568 C244.7559 24.2568 244.9897 24.0405 244.9897 23.5723 C244.9897 23.1045 244.7207 22.8877 244.3931 22.8877 Cf*UUu247.3877 20.6533 m249.7632 20.6533 L249.7632 21.25 L248.1719 21.25 L249.5117 22.9287 L249.687 23.145 249.7632 23.3853 249.7632 23.6602 C249.7632 24.3213 249.2422 24.8535 248.5464 24.8535 c247.9204 24.8535 247.3936 24.333 247.3877 23.6543 C247.9849 23.6543 L248.0137 24.0288 248.2715 24.2568 248.5933 24.2568 C248.9497 24.2568 249.1665 23.9585 249.1665 23.666 C249.1665 23.543 249.1431 23.4146 249.0142 23.2505 C247.3877 21.2148 L247.3877 20.6533 LfUu251.1436 20.6533 m251.7407 20.6533 L251.7407 24.8184 L251.1436 24.8184 L250.5527 24.3857 L250.5527 23.7534 L251.1436 24.1865 L251.1436 20.6533 LfUu*u255.0278 23.6602 m255.0278 24.0518 255.3203 24.2568 255.6245 24.2568 C255.9287 24.2568 256.2212 24.0518 256.2212 23.6602 C256.2212 23.2681 255.9287 23.0635 255.6245 23.0635 C255.3203 23.0635 255.0278 23.2681 255.0278 23.6602 Cf1 D254.355 21.8701 m254.355 21.1328 254.9341 20.6182 255.6245 20.6182 c256.3149 20.6182 256.894 21.1328 256.894 21.8701 C256.894 22.2617 256.7188 22.5952 256.4023 22.8062 C256.6484 23.0283 256.8179 23.2856 256.8179 23.6484 C256.8179 24.3213 256.2974 24.8535 255.6245 24.8535 c254.9517 24.8535 254.4312 24.3213 254.4312 23.6484 C254.4312 23.2856 254.6006 23.0283 254.8467 22.8062 C254.5308 22.5952 254.355 22.2617 254.355 21.8701 cf0 D254.9517 21.876 m254.9517 22.2559 255.2676 22.5371 255.6245 22.5371 C255.9814 22.5371 256.2974 22.2559 256.2974 21.876 C256.2974 21.4956 255.9814 21.2148 255.6245 21.2148 C255.2676 21.2148 254.9517 21.4956 254.9517 21.876 Cf*UUu257.3271 23.6191 m257.9238 23.6191 L257.9238 24.2217 L259.0293 24.2217 L257.6196 20.6533 L258.2866 20.6533 L259.6963 24.2217 L259.6963 24.8184 L257.3271 24.8184 L257.3271 23.6191 LfUu*u263.2295 21.8525 m263.2295 21.4487 262.9956 21.2148 262.6445 21.2148 C262.2935 21.2148 262.0596 21.4487 262.0596 21.8525 C262.0596 23.6191 L262.0596 24.0229 262.2935 24.2568 262.6445 24.2568 C262.9956 24.2568 263.2295 24.0229 263.2295 23.6191 C263.2295 21.8525 Lf1 D261.4624 21.8174 m261.4624 21.0508 262.0303 20.6182 262.6445 20.6182 C263.2588 20.6182 263.8262 21.0508 263.8262 21.8174 C263.8262 23.6543 L263.8262 24.4204 263.2588 24.8535 262.6445 24.8535 c262.0303 24.8535 261.4624 24.4204 261.4624 23.6543 C261.4624 21.8174 Lf*UUu0 D264.1187 21.2734 m265.8564 21.2734 L265.8564 20.6533 L266.4526 20.6533 L266.4526 21.2734 L266.7861 21.2734 L266.7861 21.835 L266.4526 21.835 L266.4526 23.0342 L265.8564 23.0342 L265.8564 21.835 L264.7681 21.835 L266.1777 24.8184 L265.5107 24.8184 L264.1187 21.835 L264.1187 21.2734 LfUu*u269.8867 22.3145 m269.313 22.3145 L269.4419 23.1567 L270.0151 23.1567 L269.8867 22.3145 Lf1 D269.6641 20.6533 m270.1206 20.6533 L270.3018 21.9287 L270.8809 21.9287 L270.8809 22.3145 L270.3428 22.3145 L270.4717 23.1567 L271.0508 23.1567 L271.0508 23.543 L270.5122 23.543 L270.6938 24.8184 L270.2373 24.8184 L270.0562 23.543 L269.4829 23.543 L269.6641 24.8184 L269.208 24.8184 L269.0264 23.543 L268.4473 23.543 L268.4473 23.1567 L268.9854 23.1567 L268.8569 22.3145 L268.2778 22.3145 L268.2778 21.9287 L268.8159 21.9287 L268.6343 20.6533 L269.0908 20.6533 L269.272 21.9287 L269.8457 21.9287 L269.6641 20.6533 Lf*UUu*u0 D272.7119 22.1392 m272.7119 21.4956 272.8052 21.25 273.0332 20.9985 C273.1973 20.8169 273.4722 20.6182 273.9341 20.6182 C274.3965 20.6182 274.6714 20.8169 274.8354 20.9985 C275.0635 21.25 275.1572 21.4956 275.1572 22.1392 c275.1572 22.7769 275.0635 23.0225 274.8354 23.2739 C274.6714 23.4551 274.3965 23.6543 273.9341 23.6543 C273.4722 23.6543 273.1973 23.4551 273.0332 23.2739 C272.8052 23.0225 272.7119 22.7769 272.7119 22.1392 cf274.5605 22.1333 m274.5605 21.7061 274.5254 21.5894 274.4141 21.4312 C274.3262 21.3086 274.1392 21.2148 273.9341 21.2148 C273.7295 21.2148 273.5425 21.3086 273.4546 21.4312 C273.3438 21.5894 273.3086 21.7061 273.3086 22.1392 C273.3086 22.5659 273.3438 22.6831 273.4546 22.8408 C273.5425 22.9639 273.7295 23.0576 273.9341 23.0576 C274.1392 23.0576 274.3262 22.9639 274.4141 22.8408 C274.5254 22.6831 274.5605 22.5659 274.5605 22.1333 Cf*UUu275.7832 21.3726 m275.7832 20.8403 276.1108 20.6533 276.5439 20.6533 C276.8071 20.6533 L276.8071 21.2148 L276.6021 21.2148 L276.4561 21.2148 276.3799 21.2852 276.3799 21.4194 C276.3799 24.8184 L275.7832 24.8184 L275.7832 21.3726 LfUu*u277.3091 20.6533 m277.9058 20.6533 L277.9058 23.6191 L277.3091 23.6191 L277.3091 20.6533 Lf1 D277.3091 24.2217 m277.9058 24.2217 L277.9058 24.8184 L277.3091 24.8184 L277.3091 24.2217 Lf*UUu0 D279.3618 20.6533 m279.8535 20.6533 L280.9414 23.6191 L280.3096 23.6191 L279.6138 21.5425 L279.6021 21.5425 L278.9058 23.6191 L278.2739 23.6191 L279.3618 20.6533 LfUu*u281.3096 20.6533 m281.9063 20.6533 L281.9063 23.6191 L281.3096 23.6191 L281.3096 20.6533 Lf1 D281.3096 24.2217 m281.9063 24.2217 L281.9063 24.8184 L281.3096 24.8184 L281.3096 24.2217 Lf*UUu*u0 D284.2515 20.6533 m284.8481 20.6533 L284.8481 22.6772 L284.8481 23.4087 284.3452 23.6543 283.6143 23.6543 c283.1694 23.6543 282.8418 23.5371 282.6138 23.2212 C283.0815 22.8643 L283.187 23.0342 283.333 23.0928 283.6431 23.0928 C284.0703 23.0928 284.2515 22.9932 284.2515 22.7124 C284.2515 22.4023 L283.4268 22.4023 L282.7891 22.4023 282.4614 21.9985 282.4614 21.5249 C282.4614 21.0103 282.8477 20.6182 283.5088 20.6182 C283.9121 20.6182 284.1172 20.7119 284.2397 20.9165 C284.2515 20.9165 L284.2515 20.6533 Lf284.2515 21.6943 m284.2515 21.2324 284.082 21.1797 283.5845 21.1797 C283.1812 21.1797 283.0229 21.355 283.0229 21.5542 C283.0229 21.7705 283.187 21.9111 283.5381 21.9111 C284.2515 21.9111 L284.2515 21.6943 Lf*UUu*u287.9199 21.9111 m287.9199 22.4023 L287.9199 23.1685 287.3525 23.6543 286.6973 23.6543 c286.124 23.6543 285.4746 23.2798 285.4746 22.1274 c285.4746 20.9106 286.1826 20.6182 286.791 20.6182 C287.1885 20.6182 287.5688 20.7583 287.8613 21.0977 C287.4287 21.4663 L287.2529 21.2852 287.0073 21.1797 286.7793 21.1797 C286.3696 21.1797 286.0713 21.4253 286.0713 21.9111 C287.9199 21.9111 Lf286.0713 22.4023 m286.083 22.853 286.3462 23.0928 286.6973 23.0928 C287.0483 23.0928 287.3057 22.853 287.3232 22.4023 C286.0713 22.4023 Lf*UUu288.5811 20.6533 m289.1777 20.6533 L289.1777 22.4199 L289.1777 22.8237 289.4297 23.0576 289.7686 23.0576 C290.1021 23.0576 290.354 22.8237 290.354 22.4199 C290.354 20.6533 L290.9507 20.6533 L290.9507 22.4199 L290.9507 22.8237 291.2021 23.0576 291.5415 23.0576 C291.8745 23.0576 292.1265 22.8237 292.1265 22.4199 C292.1265 20.6533 L292.7231 20.6533 L292.7231 22.6245 L292.7231 23.2974 292.1963 23.6543 291.7344 23.6543 C291.3311 23.6543 291.0439 23.5371 290.7983 23.2681 C290.5879 23.4844 290.377 23.6543 289.9619 23.6543 C289.646 23.6543 289.377 23.5371 289.1895 23.3032 C289.1777 23.3032 L289.1777 23.6191 L288.5811 23.6191 L288.5811 20.6533 LfUu*u294.6758 22.3965 m294.6758 22.876 295.0679 23.5723 295.6177 23.5723 C295.8926 23.5723 296.0913 23.3149 296.0913 23.0518 C296.0913 22.5952 295.688 21.8525 295.1792 21.8525 C294.8867 21.8525 294.6758 22.0806 294.6758 22.3965 Cf1 D296.2905 23.502 m296.2788 23.502 L296.144 23.8237 295.8926 23.9585 295.6177 23.9585 C294.7813 23.9585 294.2197 23.1279 294.2197 22.3555 c294.2197 21.8701 294.5645 21.4663 295.0503 21.4663 C295.4482 21.4663 295.6294 21.6538 295.7871 21.8408 C295.7988 21.8408 L295.8398 21.5894 296.0039 21.4663 296.2671 21.4663 C296.7642 21.4663 297.6006 22.1274 297.6006 23.1045 c297.6006 24.1279 296.6768 24.8535 295.5532 24.8535 c294.313 24.8535 293.3652 23.9878 293.3652 22.7593 c293.3652 21.5073 294.3013 20.6182 295.5415 20.6182 c296.3608 20.6182 297.0801 20.9927 297.4722 21.6182 C297.0859 21.6182 L296.7524 21.2676 296.314 21.0742 295.6118 21.0742 c294.5181 21.0742 293.8218 21.8057 293.8218 22.7476 c293.8218 23.625 294.4712 24.397 295.5825 24.397 c296.5068 24.397 297.1445 23.8413 297.1445 23.0752 c297.1445 22.5132 296.688 21.8174 296.355 21.8174 C296.2554 21.8174 296.2202 21.8877 296.2202 21.9868 C296.2202 22.0747 296.2437 22.1802 296.2788 22.2852 C296.7466 23.8003 L296.3608 23.8003 L296.2905 23.502 Lf*UUu*u0 D299.876 20.6592 m299.876 20.2437 299.5952 20.0156 299.1973 20.0156 C298.9692 20.0156 298.7642 20.1382 298.6182 20.2847 C298.1563 19.916 L298.4189 19.6177 298.8052 19.4189 299.1855 19.4189 C299.8643 19.4189 300.4727 19.8281 300.4727 20.7236 C300.4727 23.6191 L299.876 23.6191 L299.876 23.3032 L299.6533 23.5371 299.4136 23.6543 299.1094 23.6543 C298.7236 23.6543 298.46 23.4609 298.3257 23.2915 C298.1563 23.0693 298.1035 22.958 298.1035 22.1333 c298.1035 21.3145 298.1563 21.2031 298.3257 20.981 C298.46 20.811 298.7236 20.6182 299.1094 20.6182 C299.4136 20.6182 299.6885 20.7583 299.876 20.9634 C299.876 20.6592 Lf298.7002 22.1333 m298.7002 22.6128 298.7119 22.6948 298.8169 22.8291 C298.8989 22.9346 299.0508 23.0576 299.291 23.0576 C299.5249 23.0576 299.6768 22.9346 299.7588 22.8291 C299.8643 22.6948 299.876 22.6128 299.876 22.1333 C299.876 21.6592 299.8643 21.5776 299.7588 21.4429 C299.6768 21.3379 299.5249 21.2148 299.291 21.2148 C299.0508 21.2148 298.8989 21.3379 298.8169 21.4429 C298.7119 21.5776 298.7002 21.6592 298.7002 22.1333 Cf*UUu301.2783 20.6533 m301.875 20.6533 L301.875 22.4199 L301.875 22.8237 302.127 23.0576 302.4658 23.0576 C302.7993 23.0576 303.0508 22.8237 303.0508 22.4199 C303.0508 20.6533 L303.6475 20.6533 L303.6475 22.4199 L303.6475 22.8237 303.8994 23.0576 304.2383 23.0576 C304.5718 23.0576 304.8232 22.8237 304.8232 22.4199 C304.8232 20.6533 L305.4204 20.6533 L305.4204 22.6245 L305.4204 23.2974 304.8936 23.6543 304.4316 23.6543 C304.0278 23.6543 303.7412 23.5371 303.4956 23.2681 C303.2852 23.4844 303.0742 23.6543 302.6592 23.6543 C302.3433 23.6543 302.0742 23.5371 301.8867 23.3032 C301.875 23.3032 L301.875 23.6191 L301.2783 23.6191 L301.2783 20.6533 LfUu*u307.7827 20.6533 m308.3794 20.6533 L308.3794 22.6772 L308.3794 23.4087 307.876 23.6543 307.145 23.6543 c306.7002 23.6543 306.3726 23.5371 306.1445 23.2212 C306.6128 22.8643 L306.7178 23.0342 306.8643 23.0928 307.1743 23.0928 C307.6011 23.0928 307.7827 22.9932 307.7827 22.7124 C307.7827 22.4023 L306.9575 22.4023 L306.3203 22.4023 305.9927 21.9985 305.9927 21.5249 C305.9927 21.0103 306.3784 20.6182 307.0396 20.6182 C307.4434 20.6182 307.6479 20.7119 307.771 20.9165 C307.7827 20.9165 L307.7827 20.6533 Lf1 D307.7827 21.6943 m307.7827 21.2324 307.6128 21.1797 307.1157 21.1797 C306.7119 21.1797 306.5542 21.355 306.5542 21.5542 C306.5542 21.7705 306.7178 21.9111 307.0688 21.9111 C307.7827 21.9111 L307.7827 21.6943 Lf*UUu*u0 D309.1694 20.6533 m309.7661 20.6533 L309.7661 23.6191 L309.1694 23.6191 L309.1694 20.6533 Lf309.1694 24.2217 m309.7661 24.2217 L309.7661 24.8184 L309.1694 24.8184 L309.1694 24.2217 Lf*UUu310.5552 21.3726 m310.5552 20.8403 310.8828 20.6533 311.3159 20.6533 C311.5791 20.6533 L311.5791 21.2148 L311.3745 21.2148 L311.228 21.2148 311.1519 21.2852 311.1519 21.4194 C311.1519 24.8184 L310.5552 24.8184 L310.5552 21.3726 LfUu312.0811 20.6533 m312.6782 20.6533 L312.6782 21.25 L312.0811 21.25 L312.0811 20.6533 LfUu315.2104 21.5249 m315.0645 21.3433 314.8535 21.2148 314.6079 21.2148 C314.1226 21.2148 313.8359 21.4897 313.8359 22.1333 c313.8359 22.7827 314.1226 23.0576 314.6079 23.0576 C314.8535 23.0576 315.0645 22.9287 315.2104 22.7476 C315.6494 23.1392 L315.3921 23.438 315.0352 23.6543 314.5845 23.6543 c313.9004 23.6543 313.2393 23.2212 313.2393 22.1333 c313.2393 21.0508 313.9004 20.6182 314.5845 20.6182 C315.0352 20.6182 315.3921 20.8345 315.6494 21.1328 C315.2104 21.5249 LfUu*u315.918 22.1392 m315.918 21.4956 316.0112 21.25 316.2393 20.9985 C316.4033 20.8169 316.6782 20.6182 317.1406 20.6182 C317.6025 20.6182 317.8774 20.8169 318.0415 20.9985 C318.2695 21.25 318.3633 21.4956 318.3633 22.1392 c318.3633 22.7769 318.2695 23.0225 318.0415 23.2739 C317.8774 23.4551 317.6025 23.6543 317.1406 23.6543 C316.6782 23.6543 316.4033 23.4551 316.2393 23.2739 C316.0112 23.0225 315.918 22.7769 315.918 22.1392 cf317.7661 22.1333 m317.7661 21.7061 317.7314 21.5894 317.6201 21.4312 C317.5322 21.3086 317.3452 21.2148 317.1406 21.2148 C316.9355 21.2148 316.7485 21.3086 316.6606 21.4312 C316.5498 21.5894 316.5146 21.7061 316.5146 22.1392 C316.5146 22.5659 316.5498 22.6831 316.6606 22.8408 C316.7485 22.9639 316.9355 23.0576 317.1406 23.0576 C317.3452 23.0576 317.5322 22.9639 317.6201 22.8408 C317.7314 22.6831 317.7661 22.5659 317.7661 22.1333 Cf*UUu319.0244 20.6533 m319.6211 20.6533 L319.6211 22.4199 L319.6211 22.8237 319.8726 23.0576 320.2119 23.0576 C320.5454 23.0576 320.7969 22.8237 320.7969 22.4199 C320.7969 20.6533 L321.3936 20.6533 L321.3936 22.4199 L321.3936 22.8237 321.645 23.0576 321.9844 23.0576 C322.3179 23.0576 322.5693 22.8237 322.5693 22.4199 C322.5693 20.6533 L323.166 20.6533 L323.166 22.6245 L323.166 23.2974 322.6396 23.6543 322.1777 23.6543 C321.7739 23.6543 321.4873 23.5371 321.2417 23.2681 C321.0308 23.4844 320.8203 23.6543 320.4048 23.6543 C320.0889 23.6543 319.8198 23.5371 319.6328 23.3032 C319.6211 23.3032 L319.6211 23.6191 L319.0244 23.6191 L319.0244 20.6533 LfUUuu107.74 20.6533 m108.3718 20.6533 L108.3718 23.2505 L108.3835 23.2505 L109.2551 21.25 L109.7817 21.25 L110.6533 23.2505 L110.665 23.2505 L110.665 20.6533 L111.2969 20.6533 L111.2969 24.8184 L110.7002 24.8184 L109.53 22.104 L108.3369 24.8184 L107.74 24.8184 L107.74 20.6533 LfUu112.1211 21.6475 m112.1211 20.9751 112.6477 20.6182 113.1157 20.6182 C113.4255 20.6182 113.6948 20.7349 113.8821 20.9692 C113.8938 20.9692 L113.8938 20.6533 L114.4902 20.6533 L114.4902 23.6191 L113.8938 23.6191 L113.8938 21.8525 L113.8938 21.4487 113.6421 21.2148 113.3086 21.2148 C112.9692 21.2148 112.7178 21.4487 112.7178 21.8525 C112.7178 23.6191 L112.1211 23.6191 L112.1211 21.6475 LfUu115.2615 20.6533 m115.8582 20.6533 L115.8582 22.4199 L115.8582 22.8237 116.1099 23.0576 116.4492 23.0576 C116.7827 23.0576 117.0342 22.8237 117.0342 22.4199 C117.0342 20.6533 L117.6306 20.6533 L117.6306 22.6245 L117.6306 23.2974 117.1042 23.6543 116.6421 23.6543 C116.3262 23.6543 116.0571 23.5371 115.8699 23.3032 C115.8582 23.3032 L115.8582 23.6191 L115.2615 23.6191 L115.2615 20.6533 LfUu118.437 23.6191 m118.1387 23.6191 L118.1387 23.1626 L118.437 23.1626 L118.437 21.3843 L118.437 20.9165 118.7412 20.6533 119.1567 20.6533 C119.4668 20.6533 L119.4668 21.2148 L119.2444 21.2148 L119.0981 21.2148 119.0337 21.2734 119.0337 21.437 C119.0337 23.1626 L119.4668 23.1626 L119.4668 23.6191 L119.0337 23.6191 L119.0337 24.52 L118.437 24.52 L118.437 23.6191 LfUu*u121.5835 20.6533 m122.1802 20.6533 L122.1802 22.6772 L122.1802 23.4087 121.6772 23.6543 120.9458 23.6543 c120.5012 23.6543 120.1736 23.5371 119.9456 23.2212 C120.4136 22.8643 L120.5188 23.0342 120.665 23.0928 120.9751 23.0928 C121.4021 23.0928 121.5835 22.9932 121.5835 22.7124 C121.5835 22.4023 L120.7588 22.4023 L120.1211 22.4023 119.7935 21.9985 119.7935 21.5249 C119.7935 21.0103 120.1794 20.6182 120.8406 20.6182 C121.2444 20.6182 121.449 20.7119 121.5718 20.9165 C121.5835 20.9165 L121.5835 20.6533 Lf1 D121.5835 21.6943 m121.5835 21.2324 121.4138 21.1797 120.9167 21.1797 C120.5129 21.1797 120.355 21.355 120.355 21.5542 C120.355 21.7705 120.5188 21.9111 120.8699 21.9111 C121.5835 21.9111 L121.5835 21.6943 Lf*UUu0 D122.9529 20.6533 m123.5496 20.6533 L123.5496 22.4199 L123.5496 22.8237 123.801 23.0576 124.1404 23.0576 C124.4739 23.0576 124.7253 22.8237 124.7253 22.4199 C124.7253 20.6533 L125.322 20.6533 L125.322 22.6245 L125.322 23.2974 124.7954 23.6543 124.3335 23.6543 C124.0176 23.6543 123.7483 23.5371 123.5613 23.3032 C123.5496 23.3032 L123.5496 23.6191 L122.9529 23.6191 L122.9529 20.6533 LfUu*u128.3923 21.9111 m128.3923 22.4023 L128.3923 23.1685 127.8247 23.6543 127.1697 23.6543 c126.5962 23.6543 125.947 23.2798 125.947 22.1274 c125.947 20.9106 126.6548 20.6182 127.2632 20.6182 C127.6609 20.6182 128.0413 20.7583 128.3337 21.0977 C127.9009 21.4663 L127.7253 21.2852 127.4795 21.1797 127.2517 21.1797 C126.842 21.1797 126.5437 21.4253 126.5437 21.9111 C128.3923 21.9111 Lf1 D126.5437 22.4023 m126.5554 22.853 126.8186 23.0928 127.1697 23.0928 C127.5205 23.0928 127.7781 22.853 127.7954 22.4023 C126.5437 22.4023 Lf*UUu0 D129.0186 20.6533 m129.6152 20.6533 L129.6152 22.4375 L129.6152 22.8701 129.9019 23.0576 130.1943 23.0576 C130.3464 23.0576 130.4458 23.0166 130.5864 22.9111 C131.0193 23.4263 L130.8379 23.5664 130.6389 23.6543 130.3992 23.6543 C130.0833 23.6543 129.8142 23.5371 129.627 23.3032 C129.6152 23.3032 L129.6152 23.6191 L129.0186 23.6191 L129.0186 20.6533 LfUu132.498 20.6533 m134.8733 20.6533 L134.8733 21.25 L133.282 21.25 L134.6216 22.9287 L134.7971 23.145 134.8733 23.3853 134.8733 23.6602 C134.8733 24.3213 134.3525 24.8535 133.6563 24.8535 c133.0303 24.8535 132.5039 24.333 132.498 23.6543 C133.0947 23.6543 L133.124 24.0288 133.3813 24.2568 133.7031 24.2568 C134.0601 24.2568 134.2764 23.9585 134.2764 23.666 C134.2764 23.543 134.2532 23.4146 134.1243 23.2505 C132.498 21.2148 L132.498 20.6533 LfUu*u137.5586 22.8877 m137.6636 23.0986 137.7163 23.3384 137.7163 23.584 C137.7163 24.3677 137.1372 24.8535 136.5581 24.8535 c135.938 24.8535 135.3296 24.4731 135.3296 23.5195 c135.3296 22.7124 135.7976 22.3613 136.3242 22.3613 C136.4236 22.3613 136.5522 22.3789 136.6399 22.4141 C136.6516 22.4141 L135.7742 20.6533 L136.4412 20.6533 L137.5586 22.8877 Lf136.5229 22.8877 m136.1953 22.8877 135.9263 23.1045 135.9263 23.5723 C135.9263 24.0693 136.248 24.2568 136.5229 24.2568 C136.8857 24.2568 137.1196 24.0405 137.1196 23.5723 C137.1196 23.1045 136.8506 22.8877 136.5229 22.8877 Cf*UUu138.9568 22.5371 m139.2083 22.5371 L139.5593 22.5371 139.8518 22.291 139.8518 21.876 C139.8518 21.4663 139.5535 21.2148 139.22 21.2148 C138.8806 21.2148 138.7109 21.4019 138.5999 21.6885 C138.0032 21.6885 L138.1143 20.9927 138.6233 20.6182 139.1848 20.6182 c139.8926 20.6182 140.4485 21.1211 140.4485 21.8936 C140.4485 22.2329 140.3081 22.5835 139.957 22.8062 C140.3022 23.0283 140.4016 23.3501 140.4016 23.666 C140.4016 24.2744 139.916 24.8535 139.1731 24.8535 c138.5823 24.8535 138.0732 24.3447 138.0266 23.7534 C138.6233 23.7534 L138.6875 24.0928 138.9451 24.2568 139.1965 24.2568 C139.53 24.2568 139.8049 23.9937 139.8049 23.6543 C139.8049 23.3149 139.5593 23.0635 139.1616 23.0635 C138.9568 23.0635 L138.9568 22.5371 LfUu141.0452 21.9751 m142.8062 21.9751 L142.8062 22.5718 L141.0452 22.5718 L141.0452 21.9751 LfUu143.303 20.6533 m145.6782 20.6533 L145.6782 21.25 L144.0869 21.25 L145.4265 22.9287 L145.6021 23.145 145.6782 23.3853 145.6782 23.6602 C145.6782 24.3213 145.1575 24.8535 144.4614 24.8535 c143.8352 24.8535 143.3088 24.333 143.303 23.6543 C143.8997 23.6543 L143.929 24.0288 144.1863 24.2568 144.5081 24.2568 C144.865 24.2568 145.0813 23.9585 145.0813 23.666 C145.0813 23.543 145.0581 23.4146 144.9292 23.2505 C143.303 21.2148 L143.303 20.6533 LfUu*u148.3633 22.8877 m148.4685 23.0986 148.5212 23.3384 148.5212 23.584 C148.5212 24.3677 147.9421 24.8535 147.363 24.8535 c146.7429 24.8535 146.1345 24.4731 146.1345 23.5195 c146.1345 22.7124 146.6025 22.3613 147.1289 22.3613 C147.2285 22.3613 147.3572 22.3789 147.4448 22.4141 C147.4565 22.4141 L146.5791 20.6533 L147.2461 20.6533 L148.3633 22.8877 Lf1 D147.3279 22.8877 m147.0002 22.8877 146.7312 23.1045 146.7312 23.5723 C146.7312 24.0693 147.053 24.2568 147.3279 24.2568 C147.6907 24.2568 147.9246 24.0405 147.9246 23.5723 C147.9246 23.1045 147.6555 22.8877 147.3279 22.8877 Cf*UUu0 D149.0247 22.5659 m149.5862 22.5659 L149.7266 22.8174 149.8962 22.9111 150.1245 22.9111 C150.6157 22.9111 150.7268 22.5718 150.7268 22.1099 C150.7268 21.7178 150.7268 21.2148 150.1418 21.2148 C149.8086 21.2148 149.6094 21.4019 149.5452 21.7002 C148.9485 21.7002 L149.0361 20.9224 149.6272 20.6182 150.1653 20.6182 C150.5806 20.6182 150.8965 20.8462 151.0662 21.0625 C151.2476 21.291 151.3235 21.5073 151.3235 22.063 C151.3235 22.7534 151.2241 22.958 150.9958 23.2036 C150.8438 23.3677 150.5688 23.5078 150.2529 23.5078 C149.9956 23.5078 149.7849 23.438 149.5862 23.2798 C149.5862 24.2217 L151.2417 24.2217 L151.2417 24.8184 L149.0247 24.8184 L149.0247 22.5659 LfUu151.9438 20.2202 m152.5405 20.6533 L152.5405 21.25 L151.9438 21.25 L151.9438 20.2202 LfUu155.4822 20.6533 m156.0789 20.6533 L156.0789 24.8184 L155.4822 24.8184 L154.8914 24.3857 L154.8914 23.7534 L155.4822 24.1865 L155.4822 20.6533 LfUu*u157.2432 23.9409 m157.2432 23.5781 157.2783 23.4492 157.4302 23.2856 C157.5884 23.1104 157.834 23.0283 158.103 23.0283 C158.3779 23.0283 158.6238 23.1104 158.7817 23.2856 C158.9338 23.4492 158.969 23.5781 158.969 23.9409 C158.969 24.3037 158.9338 24.4321 158.7817 24.5962 C158.6238 24.7715 158.3779 24.8535 158.1089 24.8535 C157.834 24.8535 157.5884 24.7715 157.4302 24.5962 C157.2783 24.4321 157.2432 24.3037 157.2432 23.9409 Cf1 D157.6995 23.9409 m157.6995 24.1514 157.7053 24.2275 157.7871 24.3271 C157.8574 24.4146 157.9626 24.4673 158.1089 24.4673 C158.2493 24.4673 158.3547 24.4146 158.4248 24.3271 C158.5068 24.2275 158.5127 24.1514 158.5127 23.9409 C158.5127 23.7305 158.5068 23.6543 158.4248 23.5547 C158.3547 23.4668 158.2493 23.4146 158.103 23.4146 C157.9626 23.4146 157.8574 23.4668 157.7871 23.5547 C157.7053 23.6543 157.6995 23.7305 157.6995 23.9409 Cf*UUu0 D160.6467 20.6533 m163.022 20.6533 L163.022 21.25 L161.4307 21.25 L162.7705 22.9287 L162.9458 23.145 163.022 23.3853 163.022 23.6602 C163.022 24.3213 162.5012 24.8535 161.8052 24.8535 c161.1792 24.8535 160.6526 24.333 160.6467 23.6543 C161.2434 23.6543 L161.2727 24.0288 161.5303 24.2568 161.8521 24.2568 C162.2087 24.2568 162.4253 23.9585 162.4253 23.666 C162.4253 23.543 162.4019 23.4146 162.2732 23.2505 C160.6467 21.2148 L160.6467 20.6533 LfUu*u164.5605 23.0518 m165.0168 23.0518 L165.0168 24.2686 L165.0168 24.707 164.6892 24.8535 164.1453 24.8535 C163.7942 24.8535 163.5835 24.8008 163.4258 24.5903 C163.73 24.333 L163.7942 24.4321 163.8704 24.4673 164.1628 24.4673 C164.3501 24.4673 164.5605 24.4556 164.5605 24.2393 C164.5605 24.1338 L163.9053 24.1338 L163.5251 24.1338 163.3027 23.8823 163.3027 23.5547 C163.3027 23.2856 163.5193 23.0283 164.0808 23.0283 C164.3149 23.0283 164.4729 23.0986 164.5488 23.2212 C164.5605 23.2212 L164.5605 23.0518 Lf1 D164.5605 23.6777 m164.5605 23.4785 164.5022 23.4146 164.1218 23.4146 C163.9521 23.4146 163.759 23.4551 163.759 23.5898 C163.759 23.7305 163.8938 23.7827 164.0925 23.7827 C164.5605 23.7827 L164.5605 23.6777 Lf*UUu*u0 D169.9646 21.8525 m169.9646 21.4487 169.7305 21.2148 169.3796 21.2148 C169.0286 21.2148 168.7944 21.4487 168.7944 21.8525 C168.7944 23.6191 L168.7944 24.0229 169.0286 24.2568 169.3796 24.2568 C169.7305 24.2568 169.9646 24.0229 169.9646 23.6191 C169.9646 21.8525 Lf1 D168.1978 21.8174 m168.1978 21.0508 168.7654 20.6182 169.3796 20.6182 C169.9939 20.6182 170.5613 21.0508 170.5613 21.8174 C170.5613 23.6543 L170.5613 24.4204 169.9939 24.8535 169.3796 24.8535 c168.7654 24.8535 168.1978 24.4204 168.1978 23.6543 C168.1978 21.8174 Lf*UUu*u0 D171.5911 23.6602 m171.5911 24.0518 171.8835 24.2568 172.1877 24.2568 C172.4919 24.2568 172.7842 24.0518 172.7842 23.6602 C172.7842 23.2681 172.4919 23.0635 172.1877 23.0635 C171.8835 23.0635 171.5911 23.2681 171.5911 23.6602 Cf1 D170.9182 21.8701 m170.9182 21.1328 171.4973 20.6182 172.1877 20.6182 c172.8779 20.6182 173.457 21.1328 173.457 21.8701 C173.457 22.2617 173.2815 22.5952 172.9658 22.8062 C173.2114 23.0283 173.3811 23.2856 173.3811 23.6484 C173.3811 24.3213 172.8604 24.8535 172.1877 24.8535 c171.5149 24.8535 170.9941 24.3213 170.9941 23.6484 C170.9941 23.2856 171.1638 23.0283 171.4097 22.8062 C171.0938 22.5952 170.9182 22.2617 170.9182 21.8701 cf0 D171.5149 21.876 m171.5149 22.2559 171.8308 22.5371 172.1877 22.5371 C172.5444 22.5371 172.8604 22.2559 172.8604 21.876 C172.8604 21.4956 172.5444 21.2148 172.1877 21.2148 C171.8308 21.2148 171.5149 21.4956 171.5149 21.876 Cf*UUu*u175.5808 21.8525 m175.5808 21.4487 175.3467 21.2148 174.9958 21.2148 C174.6448 21.2148 174.4109 21.4487 174.4109 21.8525 C174.4109 23.6191 L174.4109 24.0229 174.6448 24.2568 174.9958 24.2568 C175.3467 24.2568 175.5808 24.0229 175.5808 23.6191 C175.5808 21.8525 Lf1 D173.8142 21.8174 m173.8142 21.0508 174.3816 20.6182 174.9958 20.6182 C175.6101 20.6182 176.1775 21.0508 176.1775 21.8174 C176.1775 23.6543 L176.1775 24.4204 175.6101 24.8535 174.9958 24.8535 c174.3816 24.8535 173.8142 24.4204 173.8142 23.6543 C173.8142 21.8174 Lf*UUu0 D176.5872 20.6533 m178.9622 20.6533 L178.9622 21.25 L177.3711 21.25 L178.7107 22.9287 L178.8862 23.145 178.9622 23.3853 178.9622 23.6602 C178.9622 24.3213 178.4414 24.8535 177.7454 24.8535 c177.1196 24.8535 176.593 24.333 176.5872 23.6543 C177.1838 23.6543 L177.2131 24.0288 177.4705 24.2568 177.7922 24.2568 C178.1489 24.2568 178.3655 23.9585 178.3655 23.666 C178.3655 23.543 178.342 23.4146 178.2134 23.2505 C176.5872 21.2148 L176.5872 20.6533 LfUu180.3428 20.6533 m180.9397 20.6533 L180.9397 24.8184 L180.3428 24.8184 L179.7522 24.3857 L179.7522 23.7534 L180.3428 24.1865 L180.3428 20.6533 LfUu*u184.1509 20.6533 m185.906 20.6533 L186.5317 20.6533 187.0642 21.1152 187.0642 21.835 C187.0642 22.2559 186.8418 22.689 186.3855 22.7944 C186.3855 22.8062 L186.8711 23.0225 186.9998 23.356 186.9998 23.7012 C186.9998 24.356 186.5786 24.8184 185.7656 24.8184 C184.1509 24.8184 L184.1509 20.6533 Lf185.7539 22.5015 m186.2217 22.5015 186.4324 22.2036 186.4324 21.876 C186.4324 21.5483 186.2217 21.25 185.7539 21.25 C184.7827 21.25 L184.7827 22.5015 L185.7539 22.5015 Lf185.6953 24.2568 m186.1516 24.2568 186.3679 23.9819 186.3679 23.6602 C186.3679 23.3325 186.1516 23.0635 185.6953 23.0635 C184.7827 23.0635 L184.7827 24.2568 L185.6953 24.2568 Lf*UUu189.8601 21.8174 m189.6846 21.4429 189.4155 21.25 189.0642 21.25 C188.7661 21.25 188.5496 21.3901 188.4209 21.5542 C188.2571 21.7646 188.2102 21.8818 188.2102 22.7358 c188.2102 23.5898 188.2571 23.707 188.4209 23.9175 C188.5496 24.0815 188.7661 24.2217 189.0642 24.2217 C189.4622 24.2217 189.7605 23.9409 189.8601 23.6191 C190.5269 23.6191 L190.3982 24.2979 189.8542 24.8535 189.0642 24.8535 c188.4092 24.8535 187.9587 24.4673 187.76 24.1045 C187.6252 23.8589 187.5786 23.7363 187.5786 22.7358 c187.5786 21.7354 187.6252 21.6128 187.76 21.3667 C187.9587 21.0044 188.4092 20.6182 189.0642 20.6182 c189.7781 20.6182 190.363 21.0391 190.5269 21.8174 C189.8601 21.8174 LfUu190.9707 20.6533 m191.6025 20.6533 L191.6025 23.6133 L191.6143 23.6133 L193.498 20.6533 L194.0947 20.6533 L194.0947 24.8184 L193.4629 24.8184 L193.4629 21.8584 L193.4512 21.8584 L191.5676 24.8184 L190.9707 24.8184 L190.9707 20.6533 LfUUu0 O0 35.7905 m99.3987 35.7905 L99.3987 17.3652 L0 17.3652 L0 35.7905 LfUuu*u0 0 0 0 k24.009 24.5889 m24.009 23.4775 24.061 23.3408 24.2104 23.0679 C24.4314 22.665 24.9319 22.2358 25.6599 22.2358 c26.3879 22.2358 26.8884 22.665 27.1096 23.0679 C27.259 23.3408 27.311 23.4775 27.311 24.5889 c27.311 25.7002 27.259 25.8369 27.1096 26.1099 C26.8884 26.5127 26.3879 26.9419 25.6599 26.9419 c24.9319 26.9419 24.4314 26.5127 24.2104 26.1099 C24.061 25.8369 24.009 25.7002 24.009 24.5889 cf24.7109 24.5889 m24.7109 25.5376 24.7629 25.668 24.9451 25.9019 C25.0879 26.084 25.3286 26.2397 25.6599 26.2397 C25.9915 26.2397 26.2319 26.084 26.375 25.9019 C26.5569 25.668 26.6089 25.5376 26.6089 24.5889 c26.6089 23.6396 26.5569 23.5098 26.375 23.2759 C26.2319 23.0938 25.9915 22.938 25.6599 22.938 C25.3286 22.938 25.0879 23.0938 24.9451 23.2759 C24.7629 23.5098 24.7109 23.6396 24.7109 24.5889 cf*UUu28.071 23.0742 m28.071 22.4829 28.4351 22.2749 28.916 22.2749 C29.2085 22.2749 L29.2085 22.8989 L28.981 22.8989 L28.8186 22.8989 28.7339 22.9766 28.7339 23.1265 C28.7339 26.9028 L28.071 26.9028 L28.071 23.0742 LfUu*u29.7666 22.2749 m30.4294 22.2749 L30.4294 25.5703 L29.7666 25.5703 L29.7666 22.2749 Lf1 D29.7666 26.2397 m30.4294 26.2397 L30.4294 26.9028 L29.7666 26.9028 L29.7666 26.2397 Lf*UUu0 D32.0476 22.2749 m32.5935 22.2749 L33.8025 25.5703 L33.1006 25.5703 L32.3271 23.2627 L32.314 23.2627 L31.5405 25.5703 L30.8386 25.5703 L32.0476 22.2749 LfUu*u34.2112 22.2749 m34.8745 22.2749 L34.8745 25.5703 L34.2112 25.5703 L34.2112 22.2749 Lf34.2112 26.2397 m34.8745 26.2397 L34.8745 26.9028 L34.2112 26.9028 L34.2112 26.2397 Lf*UUu*u37.4805 22.2749 m38.1433 22.2749 L38.1433 24.5239 L38.1433 25.3364 37.5845 25.6094 36.772 25.6094 c36.2778 25.6094 35.9138 25.479 35.6604 25.1284 C36.1804 24.7319 L36.2974 24.9204 36.46 24.9854 36.8044 24.9854 C37.2788 24.9854 37.4805 24.8745 37.4805 24.563 C37.4805 24.2183 L36.5637 24.2183 L35.8555 24.2183 35.4915 23.7695 35.4915 23.2432 C35.4915 22.6714 35.9204 22.2358 36.6548 22.2358 C37.1035 22.2358 37.3308 22.3398 37.4673 22.5674 C37.4805 22.5674 L37.4805 22.2749 Lf1 D37.4805 23.4316 m37.4805 22.9185 37.2917 22.8599 36.7395 22.8599 C36.291 22.8599 36.1152 23.0547 36.1152 23.2759 C36.1152 23.5161 36.2974 23.6724 36.6875 23.6724 C37.4805 23.6724 L37.4805 23.4316 Lf*UUu0 D40.6199 22.2749 m43.5774 22.2749 L43.5774 22.938 L41.3218 22.938 L41.3218 24.2964 L43.2458 24.2964 L43.2458 24.9204 L41.3218 24.9204 L41.3218 26.2397 L43.5774 26.2397 L43.5774 26.9028 L40.6199 26.9028 L40.6199 22.2749 LfUu43.8105 22.8271 m44.2332 22.4307 44.7271 22.2358 45.26 22.2358 c46.0271 22.2358 46.625 22.606 46.625 23.2495 C46.625 23.7764 46.3521 24.1924 45.6697 24.2378 C45.1235 24.2769 L44.792 24.3027 44.688 24.4458 44.688 24.5889 C44.688 24.8164 44.8311 24.9854 45.2537 24.9854 C45.6111 24.9854 45.8777 24.8618 46.1377 24.6797 C46.5471 25.1606 L46.2222 25.4336 45.832 25.6094 45.2537 25.6094 c44.5581 25.6094 44.0251 25.2646 44.0251 24.5952 c44.0251 24.0298 44.4282 23.7046 44.9741 23.6592 C45.5591 23.6074 L45.7866 23.5879 45.9622 23.5161 45.9622 23.2822 C45.9622 23.0029 45.6892 22.8599 45.312 22.8599 C44.8701 22.8599 44.5581 23.0029 44.2722 23.2822 C43.8105 22.8271 LfUu47.3337 25.5703 m47.0022 25.5703 L47.0022 25.0635 L47.3337 25.0635 L47.3337 23.0874 L47.3337 22.5674 47.6716 22.2749 48.1333 22.2749 C48.4778 22.2749 L48.4778 22.8989 L48.2307 22.8989 L48.0684 22.8989 47.9966 22.9639 47.9966 23.146 C47.9966 25.0635 L48.4778 25.0635 L48.4778 25.5703 L47.9966 25.5703 L47.9966 26.5713 L47.3337 26.5713 L47.3337 25.5703 LfUu*u51.6555 23.6724 m51.6555 24.2183 L51.6555 25.0698 51.0249 25.6094 50.2969 25.6094 c49.6599 25.6094 48.9385 25.1934 48.9385 23.9126 c48.9385 22.561 49.7249 22.2358 50.4009 22.2358 C50.843 22.2358 51.2654 22.3916 51.5903 22.769 C51.1094 23.1782 L50.9143 22.9766 50.6414 22.8599 50.3879 22.8599 C49.9329 22.8599 49.6013 23.1328 49.6013 23.6724 C51.6555 23.6724 Lf49.6013 24.2183 m49.6145 24.7188 49.907 24.9854 50.2969 24.9854 C50.687 24.9854 50.9729 24.7188 50.9922 24.2183 C49.6013 24.2183 Lf*UUu53.0532 22.2749 m53.5994 22.2749 L54.8083 25.5703 L54.1062 25.5703 L53.3328 23.2627 L53.3196 23.2627 L52.5464 25.5703 L51.8442 25.5703 L53.0532 22.2749 LfUu*u57.7131 23.6724 m57.7131 24.2183 L57.7131 25.0698 57.0825 25.6094 56.3545 25.6094 c55.7175 25.6094 54.9961 25.1934 54.9961 23.9126 c54.9961 22.561 55.7827 22.2358 56.4585 22.2358 C56.9006 22.2358 57.323 22.3916 57.6482 22.769 C57.167 23.1782 L56.9722 22.9766 56.6992 22.8599 56.4456 22.8599 C55.9907 22.8599 55.6592 23.1328 55.6592 23.6724 C57.7131 23.6724 Lf1 D55.6592 24.2183 m55.6721 24.7188 55.9646 24.9854 56.3545 24.9854 C56.7446 24.9854 57.0305 24.7188 57.05 24.2183 C55.6592 24.2183 Lf*UUu0 D60.0271 22.2749 m60.729 22.2749 L60.729 25.1606 L60.7419 25.1606 L61.7104 22.938 L62.2954 22.938 L63.2639 25.1606 L63.2771 25.1606 L63.2771 22.2749 L63.979 22.2749 L63.979 26.9028 L63.3159 26.9028 L62.0161 23.8867 L60.6899 26.9028 L60.0271 26.9028 L60.0271 22.2749 LfUu*u66.624 22.2749 m67.2869 22.2749 L67.2869 24.5239 L67.2869 25.3364 66.728 25.6094 65.9155 25.6094 c65.4214 25.6094 65.0574 25.479 64.804 25.1284 C65.324 24.7319 L65.4409 24.9204 65.6035 24.9854 65.948 24.9854 C66.4224 24.9854 66.624 24.8745 66.624 24.563 C66.624 24.2183 L65.7075 24.2183 L64.999 24.2183 64.635 23.7695 64.635 23.2432 C64.635 22.6714 65.064 22.2358 65.7983 22.2358 C66.2468 22.2358 66.4744 22.3398 66.6108 22.5674 C66.624 22.5674 L66.624 22.2749 Lf66.624 23.4316 m66.624 22.9185 66.4353 22.8599 65.8828 22.8599 C65.4343 22.8599 65.2588 23.0547 65.2588 23.2759 C65.2588 23.5161 65.4409 23.6724 65.8308 23.6724 C66.624 23.6724 L66.624 23.4316 Lf*UUu68.1453 23.3799 m68.1453 22.6323 68.7302 22.2358 69.2502 22.2358 C69.5947 22.2358 69.8938 22.3657 70.1018 22.626 C70.1147 22.626 L70.1147 22.2749 L70.7778 22.2749 L70.7778 25.5703 L70.1147 25.5703 L70.1147 23.6074 L70.1147 23.1587 69.8352 22.8989 69.4648 22.8989 C69.0879 22.8989 68.8083 23.1587 68.8083 23.6074 C68.8083 25.5703 L68.1453 25.5703 L68.1453 23.3799 LfUu71.7388 22.2749 m72.4019 22.2749 L72.4019 25.0635 L73.0647 25.0635 L73.0647 25.5703 L72.4019 25.5703 L72.4019 26.0059 L72.4019 26.207 72.4734 26.2788 72.6877 26.2788 C73.0647 26.2788 L73.0647 26.9028 L72.6357 26.9028 L72.1223 26.9028 71.7388 26.6235 71.7388 26.0059 C71.7388 25.5703 L71.4072 25.5703 L71.4072 25.0635 L71.7388 25.0635 L71.7388 22.2749 LfUu73.4409 22.2749 m74.1038 22.2749 L74.1038 24.2573 L74.1038 24.7383 74.4224 24.9463 74.7473 24.9463 C74.9163 24.9463 75.0269 24.9009 75.1829 24.7837 C75.6638 25.356 L75.4624 25.5117 75.2412 25.6094 74.9749 25.6094 C74.6238 25.6094 74.3247 25.479 74.1167 25.2192 C74.1038 25.2192 L74.1038 25.5703 L73.4409 25.5703 L73.4409 22.2749 LfUu*u77.5806 22.2749 m78.2437 22.2749 L78.2437 24.5239 L78.2437 25.3364 77.6846 25.6094 76.8721 25.6094 c76.3782 25.6094 76.0142 25.479 75.7605 25.1284 C76.2805 24.7319 L76.3975 24.9204 76.5601 24.9854 76.9045 24.9854 C77.3789 24.9854 77.5806 24.8745 77.5806 24.563 C77.5806 24.2183 L76.6641 24.2183 L75.9556 24.2183 75.5916 23.7695 75.5916 23.2432 C75.5916 22.6714 76.0205 22.2358 76.7551 22.2358 C77.2036 22.2358 77.4312 22.3398 77.5676 22.5674 C77.5806 22.5674 L77.5806 22.2749 Lf77.5806 23.4316 m77.5806 22.9185 77.3921 22.8599 76.8396 22.8599 C76.3911 22.8599 76.2156 23.0547 76.2156 23.2759 C76.2156 23.5161 76.3975 23.6724 76.7876 23.6724 C77.5806 23.6724 L77.5806 23.4316 Lf*UUu78.7378 22.8271 m79.1604 22.4307 79.6543 22.2358 80.1875 22.2358 c80.9543 22.2358 81.5525 22.606 81.5525 23.2495 C81.5525 23.7764 81.2793 24.1924 80.5969 24.2378 C80.051 24.2769 L79.7195 24.3027 79.6155 24.4458 79.6155 24.5889 C79.6155 24.8164 79.7585 24.9854 80.1809 24.9854 C80.5386 24.9854 80.8049 24.8618 81.0649 24.6797 C81.4744 25.1606 L81.1494 25.4336 80.7593 25.6094 80.1809 25.6094 c79.4854 25.6094 78.9524 25.2646 78.9524 24.5952 c78.9524 24.0298 79.3555 23.7046 79.9014 23.6592 C80.4866 23.6074 L80.7139 23.5879 80.8894 23.5161 80.8894 23.2822 C80.8894 23.0029 80.6165 22.8599 80.2395 22.8599 C79.7976 22.8599 79.4854 23.0029 79.1995 23.2822 C78.7378 22.8271 LfUUUULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(dise\226os) Ln0 Au*u0 O0 0 0 0.7 k0 J 0 j 1 w 3.8637 M []0 d1 XR196.7327 352.479 m196.7327 355.0396 198.8086 357.1157 201.3691 357.1157 c203.9302 357.1157 206.0059 355.0396 206.0059 352.479 c206.0059 349.918 203.9302 347.8423 201.3691 347.8423 c198.8086 347.8423 196.7327 349.918 196.7327 352.479 cf173.439 362.5176 m173.439 366.0752 176.323 368.9595 179.8809 368.9595 c183.4385 368.9595 186.3228 366.0752 186.3228 362.5176 c186.3228 358.9595 183.4385 356.0757 179.8809 356.0757 c176.323 356.0757 173.439 358.9595 173.439 362.5176 cf118.7314 218.1201 m118.7314 222.5859 122.3513 226.2056 126.8169 226.2056 c131.2822 226.2056 134.9023 222.5859 134.9023 218.1201 c134.9023 213.6548 131.2822 210.0347 126.8169 210.0347 c122.3513 210.0347 118.7314 213.6548 118.7314 218.1201 cf159.5667 243.0352 m159.5667 246.8071 162.6243 249.8643 166.396 249.8643 c170.168 249.8643 173.2256 246.8071 173.2256 243.0352 c173.2256 239.2632 170.168 236.2056 166.396 236.2056 c162.6243 236.2056 159.5667 239.2632 159.5667 243.0352 cf179.9412 234.0361 m179.9412 238.9438 183.9194 242.9219 188.8269 242.9219 c193.7346 242.9219 197.7129 238.9438 197.7129 234.0361 c197.7129 229.1289 193.7346 225.1504 188.8269 225.1504 c183.9194 225.1504 179.9412 229.1289 179.9412 234.0361 cf149.519 319.3042 m149.519 323.0386 152.5459 326.0654 156.2803 326.0654 c160.0144 326.0654 163.0415 323.0386 163.0415 319.3042 c163.0415 315.5703 160.0144 312.543 156.2803 312.543 c152.5459 312.543 149.519 315.5703 149.519 319.3042 cf152.0691 340.4248 m152.0691 343.4019 154.4824 345.8149 157.4595 345.8149 c160.4365 345.8149 162.8496 343.4019 162.8496 340.4248 c162.8496 337.4478 160.4365 335.0342 157.4595 335.0342 c154.4824 335.0342 152.0691 337.4478 152.0691 340.4248 cf133.1196 279.6714 m133.1196 284.8306 137.302 289.0127 142.4612 289.0127 c147.6204 289.0127 151.8025 284.8306 151.8025 279.6714 c151.8025 274.5122 147.6204 270.3301 142.4612 270.3301 c137.302 270.3301 133.1196 274.5122 133.1196 279.6714 cf212.5679 270.5591 m212.5679 275.0249 216.188 278.6445 220.6533 278.6445 c225.1191 278.6445 228.7388 275.0249 228.7388 270.5591 c228.7388 266.0938 225.1191 262.4736 220.6533 262.4736 c216.188 262.4736 212.5679 266.0938 212.5679 270.5591 cf234.1245 289.0879 m234.1245 294.5508 238.5527 298.979 244.0151 298.979 c249.4775 298.979 253.9058 294.5508 253.9058 289.0879 c253.9058 283.6255 249.4775 279.1973 244.0151 279.1973 c238.5527 279.1973 234.1245 283.6255 234.1245 289.0879 cf233.3145 331.0952 m233.3145 335.3843 236.7915 338.8613 241.0806 338.8613 c245.3696 338.8613 248.8467 335.3843 248.8467 331.0952 c248.8467 326.8062 245.3696 323.3291 241.0806 323.3291 c236.7915 323.3291 233.3145 326.8062 233.3145 331.0952 cf238.5098 310.147 m238.5098 313.2627 241.0356 315.7886 244.1514 315.7886 c247.2671 315.7886 249.793 313.2627 249.793 310.147 c249.793 307.0313 247.2671 304.5054 244.1514 304.5054 c241.0356 304.5054 238.5098 307.0313 238.5098 310.147 cf215.6587 315.1338 m215.6587 318.1484 218.1025 320.5918 221.1172 320.5918 c224.1318 320.5918 226.5757 318.1484 226.5757 315.1338 c226.5757 312.1191 224.1318 309.6753 221.1172 309.6753 c218.1025 309.6753 215.6587 312.1191 215.6587 315.1338 cf197.2993 294.2739 m197.2993 296.5195 199.1201 298.3398 201.3657 298.3398 c203.6113 298.3398 205.4316 296.5195 205.4316 294.2739 c205.4316 292.0283 203.6113 290.208 201.3657 290.208 c199.1201 290.208 197.2993 292.0283 197.2993 294.2739 cf167.7778 305.7227 m167.7778 309.8096 171.0908 313.1226 175.1777 313.1226 c179.2646 313.1226 182.5776 309.8096 182.5776 305.7227 c182.5776 301.6357 179.2646 298.3228 175.1777 298.3228 c171.0908 298.3228 167.7778 301.6357 167.7778 305.7227 cf202.4214 334.6333 m202.4214 339.4395 206.3174 343.3359 211.124 343.3359 c215.9307 343.3359 219.8271 339.4395 219.8271 334.6333 c219.8271 329.8267 215.9307 325.9302 211.124 325.9302 c206.3174 325.9302 202.4214 329.8267 202.4214 334.6333 cf221.4707 347.9941 m221.4707 351.8032 224.5586 354.8916 228.3682 354.8916 c232.1772 354.8916 235.2656 351.8032 235.2656 347.9941 c235.2656 344.1846 232.1772 341.0962 228.3682 341.0962 c224.5586 341.0962 221.4707 344.1846 221.4707 347.9941 cf205.9663 365.4033 m205.9663 367.9639 208.042 370.04 210.603 370.04 c213.1636 370.04 215.2397 367.9639 215.2397 365.4033 c215.2397 362.8423 213.1636 360.7666 210.603 360.7666 c208.042 360.7666 205.9663 362.8423 205.9663 365.4033 cf173.3989 334.1401 m173.3989 338.9844 177.3259 342.9111 182.1699 342.9111 c187.0142 342.9111 190.9409 338.9844 190.9409 334.1401 c190.9409 329.2959 187.0142 325.3691 182.1699 325.3691 c177.3259 325.3691 173.3989 329.2959 173.3989 334.1401 cf154.6384 357.1934 m154.6384 360.2339 157.103 362.6987 160.1436 362.6987 c163.1841 362.6987 165.6489 360.2339 165.6489 357.1934 c165.6489 354.1528 163.1841 351.6885 160.1436 351.6885 c157.103 351.6885 154.6384 354.1528 154.6384 357.1934 cf168.6001 379.8682 m168.6001 381.874 170.2263 383.5 172.2322 383.5 c174.238 383.5 175.864 381.874 175.864 379.8682 c175.864 377.8623 174.238 376.2363 172.2322 376.2363 c170.2263 376.2363 168.6001 377.8623 168.6001 379.8682 cf147.2085 377.4434 m147.2085 382.2876 151.1355 386.2144 155.9795 386.2144 c160.8235 386.2144 164.7505 382.2876 164.7505 377.4434 c164.7505 372.5991 160.8235 368.6724 155.9795 368.6724 c151.1355 368.6724 147.2085 372.5991 147.2085 377.4434 cf129.1079 376.1782 m129.1079 378.7764 131.2144 380.8828 133.8127 380.8828 c136.4111 380.8828 138.5176 378.7764 138.5176 376.1782 c138.5176 373.5796 136.4111 371.4731 133.8127 371.4731 c131.2144 371.4731 129.1079 373.5796 129.1079 376.1782 cf110.1902 367.7285 m110.1902 371.084 112.9104 373.8042 116.2661 373.8042 c119.6216 373.8042 122.3418 371.084 122.3418 367.7285 c122.3418 364.373 119.6216 361.6528 116.2661 361.6528 c112.9104 361.6528 110.1902 364.373 110.1902 367.7285 cf104.4155 338.625 m104.4155 341.4253 106.6858 343.6958 109.4866 343.6958 c112.2874 343.6958 114.5576 341.4253 114.5576 338.625 c114.5576 335.8242 112.2874 333.5542 109.4866 333.5542 c106.6858 333.5542 104.4155 335.8242 104.4155 338.625 cf91.6436 354.3892 m91.6436 359.2329 95.5703 363.1602 100.4146 363.1602 c105.2588 363.1602 109.1853 359.2329 109.1853 354.3892 c109.1853 349.5449 105.2588 345.6182 100.4146 345.6182 c95.5703 345.6182 91.6436 349.5449 91.6436 354.3892 cf82.8726 337.3496 m82.8726 339.7715 84.8362 341.7354 87.2581 341.7354 c89.6802 341.7354 91.6438 339.7715 91.6438 337.3496 c91.6438 334.9277 89.6802 332.9639 87.2581 332.9639 c84.8362 332.9639 82.8726 334.9277 82.8726 337.3496 cf95.1604 323.6909 m95.1604 326.1128 97.124 328.0762 99.5459 328.0762 c101.968 328.0762 103.9314 326.1128 103.9314 323.6909 c103.9314 321.2686 101.968 319.3052 99.5459 319.3052 c97.124 319.3052 95.1604 321.2686 95.1604 323.6909 cf95.2952 300.7632 m95.2952 304.396 98.2402 307.3413 101.8733 307.3413 c105.5063 307.3413 108.4514 304.396 108.4514 300.7632 c108.4514 297.1299 105.5063 294.1846 101.8733 294.1846 c98.2402 294.1846 95.2952 297.1299 95.2952 300.7632 cf74.9702 267.8677 m74.9702 272.333 78.5901 275.9531 83.0557 275.9531 c87.5212 275.9531 91.1411 272.333 91.1411 267.8677 c91.1411 263.4023 87.5212 259.7822 83.0557 259.7822 c78.5901 259.7822 74.9702 263.4023 74.9702 267.8677 cf68.3452 295.8706 m68.3452 301.5474 72.9468 306.1489 78.6235 306.1489 c84.3 306.1489 88.9016 301.5474 88.9016 295.8706 c88.9016 290.1943 84.3 285.5923 78.6235 285.5923 c72.9468 285.5923 68.3452 290.1943 68.3452 295.8706 cf75.6089 319.9907 m75.6089 323.0688 78.1042 325.564 81.1824 325.564 c84.2605 325.564 86.7556 323.0688 86.7556 319.9907 c86.7556 316.9126 84.2605 314.4175 81.1824 314.4175 c78.1042 314.4175 75.6089 316.9126 75.6089 319.9907 cf113.208 268.2856 m113.208 271.6416 115.9282 274.3618 119.2837 274.3618 c122.6394 274.3618 125.3596 271.6416 125.3596 268.2856 c125.3596 264.9302 122.6394 262.21 119.2837 262.21 c115.9282 262.21 113.208 264.9302 113.208 268.2856 cf114.675 289.895 m114.675 293.2505 117.3953 295.9707 120.7507 295.9707 c124.1064 295.9707 126.8267 293.2505 126.8267 289.895 c126.8267 286.5396 124.1064 283.8193 120.7507 283.8193 c117.3953 283.8193 114.675 286.5396 114.675 289.895 cf85.521 246.3745 m85.521 250.8022 89.1104 254.3921 93.5383 254.3921 c97.9663 254.3921 101.5557 250.8022 101.5557 246.3745 c101.5557 241.9468 97.9663 238.3574 93.5383 238.3574 c89.1104 238.3574 85.521 241.9468 85.521 246.3745 cf100.1848 227.3257 m100.1848 229.8862 102.2605 231.9624 104.8213 231.9624 c107.3823 231.9624 109.458 229.8862 109.458 227.3257 c109.458 224.7646 107.3823 222.689 104.8213 222.689 c102.2605 222.689 100.1848 224.7646 100.1848 227.3257 cf149.6729 256.1768 m149.6729 258.3218 151.4114 260.0601 153.5559 260.0601 c155.7004 260.0601 157.439 258.3218 157.439 256.1768 c157.439 254.0322 155.7004 252.2939 153.5559 252.2939 c151.4114 252.2939 149.6729 254.0322 149.6729 256.1768 cf99.0698 278.8281 m99.0698 280.9727 100.8081 282.7109 102.9526 282.7109 c105.0974 282.7109 106.8357 280.9727 106.8357 278.8281 c106.8357 276.6836 105.0974 274.9448 102.9526 274.9448 c100.8081 274.9448 99.0698 276.6836 99.0698 278.8281 cf237.1387 266.1772 m237.1387 268.3218 238.8774 270.0605 241.022 270.0605 c243.1665 270.0605 244.9048 268.3218 244.9048 266.1772 c244.9048 264.0327 243.1665 262.2944 241.022 262.2944 c238.8774 262.2944 237.1387 264.0327 237.1387 266.1772 cf213.8408 227.2104 m213.8408 229.355 215.5791 231.0938 217.7236 231.0938 c219.8682 231.0938 221.6069 229.355 221.6069 227.2104 c221.6069 225.0659 219.8682 223.3276 217.7236 223.3276 c215.5791 223.3276 213.8408 225.0659 213.8408 227.2104 cf171.8594 207.8633 m171.8594 211.0049 174.406 213.5518 177.5476 213.5518 c180.6892 213.5518 183.2358 211.0049 183.2358 207.8633 c183.2358 204.7217 180.6892 202.1753 177.5476 202.1753 c174.406 202.1753 171.8594 204.7217 171.8594 207.8633 cf142.166 208.8003 m142.166 213.0142 145.5818 216.4297 149.7959 216.4297 c154.0095 216.4297 157.4255 213.0142 157.4255 208.8003 c157.4255 204.5864 154.0095 201.1704 149.7959 201.1704 c145.5818 201.1704 142.166 204.5864 142.166 208.8003 cf157.332 223.3276 m157.332 227.5415 160.7478 230.9575 164.9619 230.9575 c169.1758 230.9575 172.5916 227.5415 172.5916 223.3276 c172.5916 219.1138 169.1758 215.6978 164.9619 215.6978 c160.7478 215.6978 157.332 219.1138 157.332 223.3276 cf137.4119 241.1064 m137.4119 245.3203 140.8279 248.7363 145.0417 248.7363 c149.2556 248.7363 152.6716 245.3203 152.6716 241.1064 c152.6716 236.8926 149.2556 233.4766 145.0417 233.4766 c140.8279 233.4766 137.4119 236.8926 137.4119 241.1064 cf114.6042 244.2856 m114.6042 248.8784 118.3271 252.6011 122.9194 252.6011 c127.512 252.6011 131.2349 248.8784 131.2349 244.2856 c131.2349 239.6934 127.512 235.9707 122.9194 235.9707 c118.3271 235.9707 114.6042 239.6934 114.6042 244.2856 cf150.5684 292.9609 m150.5684 295.938 152.9817 298.3511 155.9585 298.3511 c158.9355 298.3511 161.3489 295.938 161.3489 292.9609 c161.3489 289.9839 158.9355 287.5703 155.9585 287.5703 c152.9817 287.5703 150.5684 289.9839 150.5684 292.9609 cf211.8662 292.6094 m211.8662 296.0283 214.6377 298.8003 218.0566 298.8003 c221.4761 298.8003 224.2476 296.0283 224.2476 292.6094 c224.2476 289.1904 221.4761 286.4189 218.0566 286.4189 c214.6377 286.4189 211.8662 289.1904 211.8662 292.6094 cf204.2949 249.2739 m204.2949 252.731 207.0967 255.5332 210.5537 255.5332 c214.0103 255.5332 216.8125 252.731 216.8125 249.2739 c216.8125 245.8174 214.0103 243.0151 210.5537 243.0151 c207.0967 243.0151 204.2949 245.8174 204.2949 249.2739 cf226.5884 248.1543 m226.5884 253.4146 230.8525 257.6787 236.1128 257.6787 c241.373 257.6787 245.6372 253.4146 245.6372 248.1543 c245.6372 242.894 241.373 238.6299 236.1128 238.6299 c230.8525 238.6299 226.5884 242.894 226.5884 248.1543 cf195.2512 217.3882 m195.2512 221.2231 198.3604 224.3325 202.1958 224.3325 c206.0308 224.3325 209.1401 221.2231 209.1401 217.3882 c209.1401 213.5527 206.0308 210.4434 202.1958 210.4434 c198.3604 210.4434 195.2512 213.5527 195.2512 217.3882 cf187.7141 372.2969 m187.7141 375.8657 190.6069 378.7583 194.1755 378.7583 c197.7441 378.7583 200.6372 375.8657 200.6372 372.2969 c200.6372 368.7285 197.7441 365.8354 194.1755 365.8354 c190.6069 365.8354 187.7141 368.7285 187.7141 372.2969 cf127.8652 348.4268 m127.8652 353.3081 131.8225 357.2656 136.7043 357.2656 c141.5859 357.2656 145.5432 353.3081 145.5432 348.4268 c145.5432 343.5449 141.5859 339.5874 136.7043 339.5874 c131.8225 339.5874 127.8652 343.5449 127.8652 348.4268 cf*U*u0 0.42 1 0 k115.6406 316.4824 m115.6406 324.2842 121.9651 330.6084 129.7671 330.6084 c137.5691 330.6084 143.8933 324.2842 143.8933 316.4824 c143.8933 308.6802 137.5691 302.356 129.7671 302.356 c121.9651 302.356 115.6406 308.6802 115.6406 316.4824 cf189.2705 312.0303 m189.2705 316.8188 193.1521 320.7002 197.9404 320.7002 c202.729 320.7002 206.6104 316.8188 206.6104 312.0303 c206.6104 307.2422 202.729 303.3604 197.9404 303.3604 c193.1521 303.3604 189.2705 307.2422 189.2705 312.0303 cf165.5508 271.2051 m165.5508 281.4614 173.865 289.7754 184.1216 289.7754 c194.3779 289.7754 202.6919 281.4614 202.6919 271.2051 c202.6919 260.9487 194.3779 252.6343 184.1216 252.6343 c173.865 252.6343 165.5508 260.9487 165.5508 271.2051 cf*UU305.7949 300.8442 m316.8428 300.8442 L330.1245 300.8442 337.5742 300.9692 337.5742 285.2026 c337.5742 266.7085 334.4697 265.9624 311.8784 266.3354 c291.8921 266.7085 289.4106 267.2046 289.4106 281.7271 C289.4106 287.9341 L278.8584 287.9341 L278.8584 281.7271 L278.4854 260.0054 290.5264 257.0259 311.8784 257.0259 c334.2217 257.0259 348.1245 256.0313 348.1245 284.0869 c348.1245 297.7417 345.022 304.3198 330.8711 305.4375 C330.8711 305.6855 L344.5254 306.6782 346.2627 315.4917 346.2627 327.4092 c346.2627 351.6143 332.7329 351.4912 312.8711 351.6143 c291.2725 351.6143 280.0991 350.1255 280.0991 326.2915 C280.0991 322.3198 L290.6514 322.3198 L290.6514 326.2915 L291.1475 340.8159 293.6309 342.3047 311.5054 342.3047 c333.4771 342.3047 335.7124 340.939 335.7124 325.5474 c335.7124 309.7827 330.1245 310.4019 316.8428 310.1538 C305.7949 310.1538 L305.7949 300.8442 Lfu*u0 0 0 0.7 k282.8716 225.7983 m284.7671 225.7983 L284.7671 240.9053 L282.8716 240.9053 L282.8716 225.7983 Lf1 D282.8716 244.7271 m284.7671 244.7271 L284.7671 247.2446 L282.8716 247.2446 L282.8716 244.7271 Lf*U0 D288.4043 225.7983 m290.3003 225.7983 L290.3003 235.3369 L290.3003 238.5356 291.8999 239.4248 294.21 239.4248 c296.6982 239.4248 297.0835 237.7656 297.0835 236.0181 C297.0835 225.7983 L298.9795 225.7983 L298.9795 236.4624 L298.9795 239.3945 298.0313 241.1426 294.5361 241.1426 c292.3442 241.1426 291.3071 240.5796 290.3594 238.9502 C290.3003 238.9502 L290.3003 240.9053 L288.4043 240.9053 L288.4043 225.7983 Lf303.1538 225.7983 m305.0493 225.7983 L305.0493 239.1875 L308.3677 239.1875 L308.3677 240.9053 L305.0493 240.9053 L305.0493 243.6309 L305.0493 245.3486 305.9385 245.7632 307.1826 245.7632 c307.5977 245.7632 308.0117 245.7632 308.4268 245.7339 C308.4268 247.4219 L307.9824 247.4521 307.5376 247.4814 307.0933 247.4814 c304.4575 247.4814 303.1538 246.415 303.1538 243.6309 C303.1538 240.9053 L301.2876 240.9053 L301.2876 239.1875 L303.1538 239.1875 L303.1538 225.7983 Lf309.7837 225.7983 m311.6797 225.7983 L311.6797 236.314 L311.6797 238.3877 312.6567 239.4541 314.5532 239.4248 C316.7153 239.4248 317.041 238.6543 317.0112 235.8696 C318.7295 235.8696 L318.7295 237.084 L318.7295 240.1055 317.6333 241.1426 315.2344 241.1426 c313.3384 241.1426 312.4497 240.52 311.7388 239.0688 C311.6797 239.0688 L311.6797 240.9053 L309.7837 240.9053 L309.7837 225.7983 Lf*u329.5957 225.7983 m331.3135 225.7983 L331.3135 236.8472 L331.3135 239.7798 330.3657 241.1426 326.1592 241.1426 c321.4492 241.1426 321.0049 239.3647 321.0049 237.5283 C321.0049 236.729 L322.9014 236.729 L322.9014 238.6543 322.9604 239.4248 326.0708 239.4248 c329.2104 239.4248 329.4175 238.6543 329.4175 236.4326 C329.4175 233.6782 L329.3584 233.6782 L328.6772 234.7144 328.0552 235.0405 325.1821 235.0405 c321.1533 235.0405 320.4722 233.2632 320.4722 230.3008 c320.4722 227.3979 321.3311 225.5615 325.1821 225.5615 c327.4033 225.5615 328.4995 225.917 329.5957 227.1021 C329.5957 225.7983 Lf322.3677 230.3896 m322.3677 232.7002 323.4639 233.3223 325.9814 233.3223 c328.4995 233.3223 329.5957 232.7002 329.5957 230.3896 c329.5957 228.0791 328.4995 227.4575 325.9814 227.4575 c323.4639 227.4575 322.3677 228.0791 322.3677 230.3896 cf*U334.4219 230.479 m334.4219 225.9761 336.0215 225.5615 339.4873 225.5615 c344.3745 225.5615 345.0557 226.8354 345.0557 230.3896 c345.0557 233.7075 344.3745 234.063 339.9019 234.3291 c336.7026 234.5073 336.436 234.6851 336.436 236.8174 c336.436 239.1577 336.9102 239.4248 339.5464 239.4248 c342.3901 239.4248 343.0122 239.2764 343.0122 236.9658 C344.9082 236.9658 L344.9082 240.1353 344.0488 241.1426 339.6353 241.1426 c335.1328 241.1426 334.5405 239.8984 334.5405 236.729 c334.5405 233.3813 335.5771 232.8188 339.3687 232.6113 c342.9526 232.4043 343.1602 232.2559 343.1602 230.2715 c343.1602 227.7241 342.5977 227.2798 339.5464 227.2798 c336.7324 227.2798 336.2583 227.8721 336.3174 230.479 C334.4219 230.479 Lf348.668 228.6719 m348.668 226.4204 349.438 225.5615 352.2227 225.5615 c354.4146 225.5615 355.9546 226.0654 355.9546 230.8931 C354.2368 230.8931 L354.2368 227.5464 353.6147 227.2798 352.1929 227.2798 c350.9487 227.2798 350.564 227.8423 350.564 229.0864 C350.564 239.1875 L355.4512 239.1875 L355.4512 240.9053 L350.564 240.9053 L350.564 244.4009 L348.668 244.4009 L348.668 240.9053 L347.0977 240.9053 L347.0977 239.1875 L348.668 239.1875 L348.668 228.6719 Lf358.0195 225.7983 m359.916 225.7983 L359.916 236.314 L359.916 238.3877 360.8931 239.4541 362.7891 239.4248 C364.9512 239.4248 365.2773 238.6543 365.2476 235.8696 C366.9653 235.8696 L366.9653 237.084 L366.9653 240.1055 365.8691 241.1426 363.4702 241.1426 c361.5747 241.1426 360.686 240.52 359.9751 239.0688 C359.916 239.0688 L359.916 240.9053 L358.0195 240.9053 L358.0195 225.7983 Lf379.5498 240.9053 m377.6538 240.9053 L377.6538 231.3672 L377.6538 228.1685 376.0547 227.2798 373.7441 227.2798 c371.2559 227.2798 370.8706 228.9385 370.8706 230.686 C370.8706 240.9053 L368.9746 240.9053 L368.9746 230.2417 L368.9746 227.3091 369.9229 225.5615 373.418 225.5615 c375.6099 225.5615 376.6465 226.1245 377.5942 227.7534 C377.6538 227.7534 L377.6538 225.7983 L379.5498 225.7983 L379.5498 240.9053 Lf392.9365 235.8696 m392.9365 239.8691 392.0776 241.1426 387.9897 241.1426 c383.4282 241.1426 382.4214 239.6021 382.4214 233.3521 c382.4214 227.2207 383.0132 225.5615 387.9897 225.5615 c391.3667 225.5615 393.2036 226.3911 393.2036 230.3008 C393.2036 231.2783 L391.3071 231.2783 L391.3071 228.02 390.7153 227.2798 387.9897 227.2798 c384.9688 227.2798 384.4946 227.7241 384.4946 233.3521 c384.4946 238.9805 384.9688 239.4248 387.9897 239.4248 c390.5078 239.4248 391.041 238.6245 391.041 235.8696 C392.9365 235.8696 Lf396.3398 228.6719 m396.3398 226.4204 397.1099 225.5615 399.8945 225.5615 c402.0869 225.5615 403.6265 226.0654 403.6265 230.8931 C401.9087 230.8931 L401.9087 227.5464 401.2866 227.2798 399.8647 227.2798 c398.6211 227.2798 398.2358 227.8423 398.2358 229.0864 C398.2358 239.1875 L403.123 239.1875 L403.123 240.9053 L398.2358 240.9053 L398.2358 244.4009 L396.3398 244.4009 L396.3398 240.9053 L394.77 240.9053 L394.77 239.1875 L396.3398 239.1875 L396.3398 228.6719 Lf416.2671 240.9053 m414.3706 240.9053 L414.3706 231.3672 L414.3706 228.1685 412.7715 227.2798 410.4614 227.2798 c407.9727 227.2798 407.5879 228.9385 407.5879 230.686 C407.5879 240.9053 L405.6919 240.9053 L405.6919 230.2417 L405.6919 227.3091 406.6401 225.5615 410.1353 225.5615 c412.3271 225.5615 413.3638 226.1245 414.3115 227.7534 C414.3706 227.7534 L414.3706 225.7983 L416.2671 225.7983 L416.2671 240.9053 Lf419.4048 225.7983 m421.3008 225.7983 L421.3008 236.314 L421.3008 238.3877 422.2778 239.4541 424.1738 239.4248 C426.3364 239.4248 426.6621 238.6543 426.6323 235.8696 C428.3506 235.8696 L428.3506 237.084 L428.3506 240.1055 427.2544 241.1426 424.855 241.1426 c422.9595 241.1426 422.0708 240.52 421.3599 239.0688 C421.3008 239.0688 L421.3008 240.9053 L419.4048 240.9053 L419.4048 225.7983 Lf*u432.1665 234.8037 m432.1665 238.0024 432.2256 239.4248 435.6025 239.4248 c438.9795 239.4248 439.0386 238.0024 439.0386 234.8037 C432.1665 234.8037 Lf1 D440.9346 232.9077 m440.9346 235.1885 L440.9346 239.3057 440.1938 241.1426 435.6616 241.1426 c431.1001 241.1426 430.0933 239.6021 430.0933 233.3521 c430.0933 227.2207 430.6855 225.5615 435.6616 225.5615 c440.1938 225.5615 440.9346 226.7168 440.9346 229.7378 C440.9346 230.3008 L439.0386 230.3008 L439.0386 227.3389 438.3872 227.2798 435.3359 227.2798 c432.729 227.2798 432.1665 228.2275 432.1665 231.5151 C432.1665 232.9077 L440.9346 232.9077 Lf*U0 D453.3398 225.7983 m455.2354 225.7983 L455.2354 239.1875 L458.5537 239.1875 L458.5537 240.9053 L455.2354 240.9053 L455.2354 243.6309 L455.2354 245.3486 456.1245 245.7632 457.3682 245.7632 c457.7832 245.7632 458.1978 245.7632 458.6128 245.7339 C458.6128 247.4219 L458.1685 247.4521 457.7236 247.4814 457.2793 247.4814 c454.6436 247.4814 453.3398 246.415 453.3398 243.6309 C453.3398 240.9053 L451.4736 240.9053 L451.4736 239.1875 L453.3398 239.1875 L453.3398 225.7983 Lf*u461.7764 233.3521 m461.7764 238.9805 462.251 239.4248 465.272 239.4248 c468.2935 239.4248 468.7676 238.9805 468.7676 233.3521 c468.7676 227.7241 468.2935 227.2798 465.272 227.2798 c462.251 227.2798 461.7764 227.7241 461.7764 233.3521 cf1 D459.7036 233.3521 m459.7036 227.1021 460.3545 225.5615 465.272 225.5615 c470.189 225.5615 470.8408 227.1021 470.8408 233.3521 c470.8408 239.3647 470.248 241.1426 465.272 241.1426 c460.2954 241.1426 459.7036 239.3647 459.7036 233.3521 cf*U0 D473.7114 225.7983 m475.6074 225.7983 L475.6074 236.314 L475.6074 238.3877 476.5845 239.4541 478.4805 239.4248 C480.6431 239.4248 480.9688 238.6543 480.939 235.8696 C482.6572 235.8696 L482.6572 237.084 L482.6572 240.1055 481.561 241.1426 479.1621 241.1426 c477.2661 241.1426 476.3774 240.52 475.6665 239.0688 C475.6074 239.0688 L475.6074 240.9053 L473.7114 240.9053 L473.7114 225.7983 Lf493.4009 228.6719 m493.4009 226.4204 494.1704 225.5615 496.9551 225.5615 c499.1475 225.5615 500.6875 226.0654 500.6875 230.8931 C498.9692 230.8931 L498.9692 227.5464 498.3477 227.2798 496.9253 227.2798 c495.6816 227.2798 495.2964 227.8423 495.2964 229.0864 C495.2964 239.1875 L500.1836 239.1875 L500.1836 240.9053 L495.2964 240.9053 L495.2964 244.4009 L493.4009 244.4009 L493.4009 240.9053 L491.8306 240.9053 L491.8306 239.1875 L493.4009 239.1875 L493.4009 228.6719 Lf502.7524 225.7983 m504.6484 225.7983 L504.6484 235.3369 L504.6484 238.5356 506.248 239.4248 508.5581 239.4248 c511.0464 239.4248 511.4316 237.7656 511.4316 236.0181 C511.4316 225.7983 L513.3276 225.7983 L513.3276 236.4624 L513.3276 239.3945 512.3799 241.1426 508.8843 241.1426 c506.6924 241.1426 505.6558 240.5796 504.708 238.9502 C504.6484 238.9502 L504.6484 247.2446 L502.7524 247.2446 L502.7524 225.7983 Lf*u518.2725 234.8037 m518.2725 238.0024 518.3315 239.4248 521.7085 239.4248 c525.085 239.4248 525.1445 238.0024 525.1445 234.8037 C518.2725 234.8037 Lf1 D527.0405 232.9077 m527.0405 235.1885 L527.0405 239.3057 526.2998 241.1426 521.7676 241.1426 c517.2061 241.1426 516.1992 239.6021 516.1992 233.3521 c516.1992 227.2207 516.791 225.5615 521.7676 225.5615 c526.2998 225.5615 527.0405 226.7168 527.0405 229.7378 C527.0405 230.3008 L525.1445 230.3008 L525.1445 227.3389 524.4932 227.2798 521.4419 227.2798 c518.835 227.2798 518.2725 228.2275 518.2725 231.5151 C518.2725 232.9077 L527.0405 232.9077 Lf*U*u0 D0 0.42 1 0 k542.6152 236.8174 m542.6152 237.3809 542.9707 237.647 543.6226 237.647 c544.2744 237.647 544.6294 237.3809 544.6294 236.8174 C544.6294 229.8862 L544.6294 229.3237 544.2744 229.0571 543.6226 229.0571 c542.9707 229.0571 542.6152 229.3237 542.6152 229.8862 C542.6152 236.8174 Lf1 D538.2314 220.2295 m542.6152 220.2295 L542.6152 227.1313 L542.6748 227.1313 L543.3853 226.1245 544.3335 225.5615 545.9033 225.5615 c547.7695 225.5615 549.1914 226.2725 549.1914 228.6128 C549.1914 237.0249 L549.1914 240.1055 548.332 241.1426 545.6665 241.1426 c544.0962 241.1426 543.3262 240.9053 542.4966 239.3354 C542.4375 239.3354 L542.4375 240.9053 L538.2314 240.9053 L538.2314 220.2295 Lf*U0 D551.9731 225.7983 m556.3574 225.7983 L556.3574 236.8472 L556.3574 237.4692 556.7417 237.647 557.2461 237.647 C557.7197 237.647 558.1348 237.5283 558.1348 237.0547 C558.1348 234.8037 L561.8076 234.8037 L561.8076 238.8911 L561.7778 240.7573 560.8003 241.1426 559.2305 241.1426 c557.542 241.1426 556.8311 240.7871 556.2383 239.395 C556.1792 239.395 L556.1792 240.9053 L551.9731 240.9053 L551.9731 225.7983 Lf*u563.1958 230.3604 m563.1958 226.3018 565.21 225.5615 568.9717 225.5615 c572.7339 225.5615 574.748 226.3018 574.748 230.3604 C574.748 236.3438 L574.748 240.4019 572.7339 241.1426 568.9717 241.1426 c565.21 241.1426 563.1958 240.4019 563.1958 236.3438 C563.1958 230.3604 Lf567.7573 236.729 m567.7573 237.647 568.1133 237.8252 568.9717 237.8252 c569.8311 237.8252 570.1865 237.647 570.1865 236.729 C570.1865 229.9751 L570.1865 229.0571 569.8311 228.8794 568.9717 228.8794 c568.1133 228.8794 567.7573 229.0571 567.7573 229.9751 C567.7573 236.729 Lf*U*u581.6182 236.9365 m581.6182 237.5879 581.9141 237.8252 582.7139 237.8252 c583.5137 237.8252 583.8096 237.5879 583.8096 236.9365 C583.8096 229.7085 L583.8096 229.0571 583.5137 228.8198 582.7139 228.8198 c581.9141 228.8198 581.6182 229.0571 581.6182 229.7085 C581.6182 236.9365 Lf1 D577.2339 229.3828 m577.2339 227.3682 578.0039 225.6802 580.7588 225.6802 c582.0625 225.6802 583.0693 226.1538 583.7505 227.0723 C583.8096 227.0723 L583.8096 224.3765 L583.8096 223.5771 583.4839 223.3696 582.6841 223.3696 c581.8843 223.3696 581.5581 223.5771 581.5581 224.0508 C581.5581 224.3765 L577.708 224.3765 L577.708 223.5771 L577.708 221.5923 578.8037 220.2295 582.2695 220.2295 c586.2686 220.2295 588.1938 221.0298 588.1938 224.4658 C588.1938 240.9053 L584.1357 240.9053 L584.1357 239.5132 L584.0762 239.5132 L583.1284 240.7871 582.1509 241.1426 580.4331 241.1426 c578.3892 241.1426 577.2339 239.7798 577.2339 237.1733 C577.2339 229.3828 Lf*U0 D590.9756 225.7983 m595.3599 225.7983 L595.3599 236.8472 L595.3599 237.4692 595.7441 237.647 596.2485 237.647 C596.7222 237.647 597.1372 237.5283 597.1372 237.0547 C597.1372 234.8037 L600.8101 234.8037 L600.8101 238.8911 L600.7803 240.7573 599.8027 241.1426 598.2329 241.1426 c596.5444 241.1426 595.8335 240.7871 595.2407 239.395 C595.1816 239.395 L595.1816 240.9053 L590.9756 240.9053 L590.9756 225.7983 Lf*u602.4351 236.5806 m606.2861 236.5806 L606.2861 237.4102 L606.2861 237.9727 606.7007 238.1802 607.3525 238.1802 c608.0928 238.1802 608.478 237.9434 608.478 237.4399 C608.478 234.0923 L607.6484 234.7734 606.6416 235.0703 605.5752 235.0703 c603.1758 235.0703 601.7837 234.1519 601.7837 230.4492 c601.7837 227.3389 602.4058 225.5615 605.4268 225.5615 c607.0859 225.5615 607.6484 225.7983 608.5967 227.0723 C608.6558 227.0723 L608.6558 225.7983 L612.8623 225.7983 L612.8623 236.8765 L612.8623 240.5796 611.1733 241.1426 607.2637 241.1426 c603.9165 241.1426 602.4351 240.6982 602.4351 238.4761 C602.4351 236.5806 Lf606.3452 231.0117 m606.3452 232.019 606.7007 232.2852 607.4116 232.2852 c608.271 232.2852 608.478 231.9595 608.478 231.1899 C608.478 229.9751 L608.478 229.3828 608.3301 228.8794 607.4116 228.8794 c606.6123 228.8794 606.375 229.1753 606.3452 230.1528 C606.3452 231.0117 Lf*U615.6431 225.7983 m620.0273 225.7983 L620.0273 236.6104 L620.0273 237.2617 620.3237 237.647 621.0938 237.647 c621.9233 237.647 622.2192 237.2617 622.2192 236.6104 C622.2192 225.7983 L626.6035 225.7983 L626.6035 236.6104 L626.6035 237.2617 626.8994 237.647 627.6699 237.647 c628.499 237.647 628.7954 237.2617 628.7954 236.6104 C628.7954 225.7983 L633.1797 225.7983 L633.1797 237.6768 L633.1797 240.2832 631.6685 241.1426 629.8911 241.1426 c628.3213 241.1426 627.2847 240.5796 626.6626 239.2466 C625.9517 240.7871 624.6187 241.1719 623.3452 241.1426 C621.7456 241.1426 620.7085 240.5796 620.0869 239.2466 C620.0273 239.2466 L620.0273 240.9053 L615.6431 240.9053 L615.6431 225.7983 Lf635.9575 225.7983 m640.3418 225.7983 L640.3418 236.6104 L640.3418 237.2617 640.6377 237.647 641.4077 237.647 c642.2373 237.647 642.5332 237.2617 642.5332 236.6104 C642.5332 225.7983 L646.9175 225.7983 L646.9175 236.6104 L646.9175 237.2617 647.2139 237.647 647.9839 237.647 c648.8135 237.647 649.1094 237.2617 649.1094 236.6104 C649.1094 225.7983 L653.4937 225.7983 L653.4937 237.6768 L653.4937 240.2832 651.9824 241.1426 650.2056 241.1426 c648.6357 241.1426 647.5986 240.5796 646.9771 239.2466 C646.2661 240.7871 644.9331 241.1719 643.6592 241.1426 C642.0596 241.1426 641.0229 240.5796 640.4009 239.2466 C640.3418 239.2466 L640.3418 240.9053 L635.9575 240.9053 L635.9575 225.7983 Lf*u656.2124 236.5806 m660.0635 236.5806 L660.0635 237.4102 L660.0635 237.9727 660.4775 238.1802 661.1294 238.1802 c661.8701 238.1802 662.2549 237.9434 662.2549 237.4399 C662.2549 234.0923 L661.4258 234.7734 660.4185 235.0703 659.3525 235.0703 c656.9531 235.0703 655.5605 234.1519 655.5605 230.4492 c655.5605 227.3389 656.1831 225.5615 659.2041 225.5615 c660.8628 225.5615 661.4258 225.7983 662.374 227.0723 C662.4331 227.0723 L662.4331 225.7983 L666.6392 225.7983 L666.6392 236.8765 L666.6392 240.5796 664.9507 241.1426 661.0405 241.1426 c657.6934 241.1426 656.2124 240.6982 656.2124 238.4761 C656.2124 236.5806 Lf660.1226 231.0117 m660.1226 232.019 660.4775 232.2852 661.1885 232.2852 c662.0479 232.2852 662.2549 231.9595 662.2549 231.1899 C662.2549 229.9751 L662.2549 229.3828 662.1069 228.8794 661.1885 228.8794 c660.3892 228.8794 660.1519 229.1753 660.1226 230.1528 C660.1226 231.0117 Lf*U*u673.8047 236.8174 m673.8047 237.3809 674.1602 237.647 674.8115 237.647 c675.4634 237.647 675.8188 237.3809 675.8188 236.8174 C675.8188 229.8862 L675.8188 229.3237 675.4634 229.0571 674.8115 229.0571 c674.1602 229.0571 673.8047 229.3237 673.8047 229.8862 C673.8047 236.8174 Lf1 D669.4204 225.7983 m673.5972 225.7983 L673.5972 227.3682 L673.6563 227.3682 L674.5151 225.7983 675.2852 225.5615 676.7964 225.5615 c679.5215 225.5615 680.3809 226.5981 680.3809 229.6787 C680.3809 238.0913 L680.3809 240.4316 678.9585 241.1426 677.0923 241.1426 c675.5225 241.1426 674.5742 240.5796 673.8638 239.5723 C673.8047 239.5723 L673.8047 247.2446 L669.4204 247.2446 L669.4204 225.7983 Lf*U0 D683.1621 225.7983 m687.5464 225.7983 L687.5464 247.2446 L683.1621 247.2446 L683.1621 225.7983 Lf*u690.0313 230.3604 m690.0313 226.3018 692.0449 225.5615 695.8066 225.5615 c700.2505 225.5615 701.5835 226.4502 701.5835 229.6196 C701.5835 230.479 L697.1396 230.479 L697.1396 229.7681 L697.1396 228.8794 696.7554 228.7017 695.896 228.7017 c694.7705 228.7017 694.5923 228.9385 694.5923 229.7378 C694.5923 232.2852 L701.5835 232.2852 L701.5835 236.9658 L701.5835 239.3354 700.6055 241.1426 695.8066 241.1426 c692.0449 241.1426 690.0313 240.4019 690.0313 236.3438 C690.0313 230.3604 Lf694.5923 237.2915 m694.5923 237.9136 694.7998 238.1802 695.8066 238.1802 c696.8145 238.1802 697.0215 237.9136 697.0215 237.2915 C697.0215 235.0703 L694.5923 235.0703 L694.5923 237.2915 Lf*U712.749 225.7983 m719.2656 225.7983 L720.48 237.7656 L720.5391 237.7656 L721.7539 225.7983 L728.2705 225.7983 L730.522 240.9053 L726.4043 240.9053 L725.042 228.5825 L724.9829 228.5825 L723.6201 240.9053 L717.3994 240.9053 L716.0371 228.5825 L715.9775 228.5825 L714.6152 240.9053 L710.498 240.9053 L712.749 225.7983 Lf*u732.0283 230.3604 m732.0283 226.3018 734.0425 225.5615 737.8042 225.5615 c742.248 225.5615 743.5806 226.4502 743.5806 229.6196 C743.5806 230.479 L739.1372 230.479 L739.1372 229.7681 L739.1372 228.8794 738.7524 228.7017 737.8936 228.7017 c736.7681 228.7017 736.5898 228.9385 736.5898 229.7378 C736.5898 232.2852 L743.5806 232.2852 L743.5806 236.9658 L743.5806 239.3354 742.603 241.1426 737.8042 241.1426 c734.0425 241.1426 732.0283 240.4019 732.0283 236.3438 C732.0283 230.3604 Lf736.5898 237.2915 m736.5898 237.9136 736.7974 238.1802 737.8042 238.1802 c738.812 238.1802 739.0186 237.9136 739.0186 237.2915 C739.0186 235.0703 L736.5898 235.0703 L736.5898 237.2915 Lf*U*u750.4507 236.8174 m750.4507 237.3809 750.8057 237.647 751.4575 237.647 c752.1094 237.647 752.4644 237.3809 752.4644 236.8174 C752.4644 229.8862 L752.4644 229.3237 752.1094 229.0571 751.4575 229.0571 c750.8057 229.0571 750.4507 229.3237 750.4507 229.8862 C750.4507 236.8174 Lf1 D746.0664 225.7983 m750.2432 225.7983 L750.2432 227.3682 L750.3022 227.3682 L751.1611 225.7983 751.9312 225.5615 753.4424 225.5615 c756.167 225.5615 757.0264 226.5981 757.0264 229.6787 C757.0264 238.0913 L757.0264 240.4316 755.6045 241.1426 753.7383 241.1426 c752.1685 241.1426 751.2202 240.5796 750.5098 239.5723 C750.4507 239.5723 L750.4507 247.2446 L746.0664 247.2446 L746.0664 225.7983 Lf*UUu0 D0 0 0 0.7 k438.8687 327.1411 m438.8687 347.5015 419.5342 348.188 403.793 348.188 c379.4927 348.188 364.6074 347.6738 364.6074 321.666 c364.6074 296.1694 384.2837 298.2217 403.793 296.8535 c420.2188 295.8276 427.2344 298.9058 427.2344 282.1382 c427.2344 266.2246 413.0303 268.2764 403.793 268.2764 c383.2578 268.2764 377.9546 270.1592 377.9546 278.7153 C377.9546 285.731 L363.9233 285.731 L363.9233 277.3472 L363.9233 257.3262 384.2837 256.3003 403.793 256.3003 c423.811 256.3003 441.2656 257.3262 441.2656 282.6499 c441.2656 311.9111 420.2188 308.3184 397.1191 309.6865 c383.0879 310.3706 378.6387 309.1724 378.6387 325.2583 c378.6387 336.3813 386.8501 336.209 403.793 336.209 c417.9941 336.209 424.8374 336.209 424.8374 327.1411 C424.8374 323.7178 L438.8687 323.7178 L438.8687 327.1411 Lf520.8037 289.8379 m520.8037 285.3887 L520.8037 269.1328 514.6445 267.2505 497.7041 267.2505 c471.3516 267.2505 470.3257 274.9502 470.3257 300.2769 c470.3257 329.0234 470.8398 337.2349 494.7959 337.2349 c510.3677 337.2349 519.2656 336.8931 519.2656 320.6372 C519.2656 317.9009 L532.7827 317.9009 L532.7827 320.2949 L532.7827 345.791 515.6704 348.188 493.9395 348.188 c461.4272 348.188 456.2944 333.3003 456.2944 304.0391 c456.2944 270.6733 458.8608 256.3003 496.1636 256.3003 c517.5527 256.3003 534.3232 259.5508 534.3232 284.8745 C534.3232 289.8379 L520.8037 289.8379 Lf*u586.3335 267.2505 m570.7617 267.2505 563.7461 268.1069 563.7461 285.2168 c563.7461 299.7622 570.25 300.7886 586.3335 300.7886 c603.4458 300.7886 613.54 300.9609 613.54 284.021 c613.54 267.5928 599.8506 267.2505 586.3335 267.2505 cf1 D627.4019 257.3262 m627.4019 318.585 L627.5713 345.9634 610.9736 348.3579 588.3857 348.188 c568.3677 348.3579 552.4536 346.8174 552.4536 323.7178 C552.4536 321.8354 L566.4854 321.8354 L566.4854 324.9165 L566.313 337.2349 579.3179 337.2349 589.9263 337.2349 c605.1563 337.2349 613.8818 335.6943 613.8818 319.269 C613.8818 302.6709 L613.0283 302.6709 L611.146 310.8853 593.6914 311.7388 584.793 311.7388 c562.5479 311.7388 549.7148 308.3184 549.7148 283.5063 c549.7148 260.0649 563.7461 256.3003 583.937 256.3003 c595.2319 256.3003 608.4067 256.6421 613.54 266.9087 C613.8818 266.5664 L613.8818 257.3262 L627.4019 257.3262 Lf*U0 D663.9995 385.6606 m650.48 385.6606 L650.48 257.3262 L663.9995 257.3262 L663.9995 385.6606 Lf*u749.1929 284.5327 m749.1929 281.1123 L749.1929 268.4492 743.2036 267.2505 724.7231 267.2505 c700.4253 267.2505 698.373 270.8433 698.373 299.248 C763.0522 299.248 L763.0522 308.3184 L763.0522 341.5146 753.812 348.188 724.7231 348.188 c692.5557 348.188 684.3418 339.4595 684.3418 302.1567 c684.3418 267.9346 689.6445 256.3003 724.7231 256.3003 c744.7441 256.3003 763.0522 257.4985 763.0522 281.2817 C763.0522 284.5327 L749.1929 284.5327 Lf698.373 310.2012 m699.3994 330.9033 700.2559 337.2349 724.7231 337.2349 c745.2583 337.2349 748.3364 335.6943 749.0205 310.2012 C698.373 310.2012 Lf*UULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Guides) Ln0 ALB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF